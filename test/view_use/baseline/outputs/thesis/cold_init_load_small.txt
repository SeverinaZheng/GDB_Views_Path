neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 8771ms to create views
baseline G15 MATCH (p:Post)-[:HAS_TAG]-(t) WHERE t.tagId='html' WITH p MATCH (p)-[:POSTED]-(m:User) RETURN DISTINCT m
Executing query: MATCH (p:Post)-[:HAS_TAG]-(t) WHERE t.tagId='html' WITH p MATCH (p)-[:POSTED]-(m:User) RETURN DISTINCT m
Execution done
Node size is 3118
Edge size is 0
Took 2565 ms to execute baseline query
Baseline returned 3118 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 9156ms to create views
baseline V18 MATCH (n:User)-[:POSTED]-(po:Post)-[:PARENT_OF]-(po2:Post) WHERE n.upvotes > 0 AND po.comments > 10 AND po2.comments<10  RETURN DISTINCT po2
Executing query: MATCH (n:User)-[:POSTED]-(po:Post)-[:PARENT_OF]-(po2:Post) WHERE n.upvotes > 0 AND po.comments > 10 AND po2.comments<10  RETURN DISTINCT po2
Execution done
Node size is 16223
Edge size is 0
Took 2025 ms to execute baseline query
Baseline returned 16223 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 8461ms to create views
baseline V6 MATCH p = (n:User)-[:POSTED]-(po:Post) WHERE n.reputation < 500 RETURN p
Executing query: MATCH p = (n:User)-[:POSTED]-(po:Post) WHERE n.reputation < 500 RETURN p
Execution done
Node size is 42081
Edge size is 34096
Took 623 ms to execute baseline query
Baseline returned 76177 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 8434ms to create views
baseline L18_19 MATCH (n:User)-[:POSTED]-(po:Post)-[:PARENT_OF]-(po2:Post) WHERE n.upvotes > 0 AND po.comments > 10 AND po2.comments<10  WITH po2 MATCH (po2)-[:PARENT_OF]-(po3:Post) WHERE po2.score =15 AND po3.score = 50 RETURN DISTINCT po2
Executing query: MATCH (n:User)-[:POSTED]-(po:Post)-[:PARENT_OF]-(po2:Post) WHERE n.upvotes > 0 AND po.comments > 10 AND po2.comments<10  WITH po2 MATCH (po2)-[:PARENT_OF]-(po3:Post) WHERE po2.score =15 AND po3.score = 50 RETURN DISTINCT po2
Execution done
Node size is 0
Edge size is 0
Took 2078 ms to execute baseline query
Baseline returned 0 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 8607ms to create views
baseline V5 MATCH (n:Tag) WHERE n.tagId = 'java' OR n.tagId = 'html' RETURN DISTINCT n
Executing query: MATCH (n:Tag) WHERE n.tagId = 'java' OR n.tagId = 'html' RETURN DISTINCT n
Execution done
Node size is 2
Edge size is 0
Took 136 ms to execute baseline query
Baseline returned 2 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 8423ms to create views
baseline V19 MATCH (n:Post)-[:PARENT_OF]-(m:Post) WHERE n.score =15 AND m.score = 50 RETURN DISTINCT n
Executing query: MATCH (n:Post)-[:PARENT_OF]-(m:Post) WHERE n.score =15 AND m.score = 50 RETURN DISTINCT n
Execution done
Node size is 37
Edge size is 0
Took 1694 ms to execute baseline query
Baseline returned 37 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 8259ms to create views
baseline G20 MATCH (n:Post)-[:HAS_TAG]-(t) WHERE n.postId = '1065111' WITH t MATCH (t)-[:HAS_TAG]-(p:Post) RETURN DISTINCT p
Executing query: MATCH (n:Post)-[:HAS_TAG]-(t) WHERE n.postId = '1065111' WITH t MATCH (t)-[:HAS_TAG]-(p:Post) RETURN DISTINCT p
Execution done
Node size is 13270
Edge size is 0
Took 2187 ms to execute baseline query
Baseline returned 13270 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 8344ms to create views
baseline V8 MATCH (n:User)-[:POSTED]-(po:Post)-[:PARENT_OF]-(po2:Post) WHERE n.upvotes > 800 AND po.comments > 10  RETURN DISTINCT po2
Executing query: MATCH (n:User)-[:POSTED]-(po:Post)-[:PARENT_OF]-(po2:Post) WHERE n.upvotes > 800 AND po.comments > 10  RETURN DISTINCT po2
Execution done
Node size is 11173
Edge size is 0
Took 1322 ms to execute baseline query
Baseline returned 11173 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 8581ms to create views
baseline L1_8 MATCH (n:User)-[:POSTED]-(po:Post)-[:PARENT_OF]-(po2:Post) WHERE n.upvotes > 800 AND po.comments > 10 AND po2.score > 350 RETURN DISTINCT po2
Executing query: MATCH (n:User)-[:POSTED]-(po:Post)-[:PARENT_OF]-(po2:Post) WHERE n.upvotes > 800 AND po.comments > 10 AND po2.score > 350 RETURN DISTINCT po2
Execution done
Node size is 983
Edge size is 0
Took 1392 ms to execute baseline query
Baseline returned 983 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 8345ms to create views
baseline V17 MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User) WHERE n.userId<m.userId AND n.reputation>m.reputation RETURN DISTINCT m
Executing query: MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User) WHERE n.userId<m.userId AND n.reputation>m.reputation RETURN DISTINCT m
Execution done
Node size is 22714
Edge size is 0
Took 7736 ms to execute baseline query
Baseline returned 22714 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 8569ms to create views
baseline V16 MATCH p = (n:User)-[:POSTED]-(po:Post) WHERE n.reputation < 50000 RETURN DISTINCT p
Executing query: MATCH p = (n:User)-[:POSTED]-(po:Post) WHERE n.reputation < 50000 RETURN DISTINCT p
Execution done
Node size is 971805
Edge size is 948097
Took 4004 ms to execute baseline query
Baseline returned 1919902 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 8290ms to create views
baseline V7 MATCH (n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 100 AND m.score < 600 RETURN DISTINCT n
Executing query: MATCH (n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 100 AND m.score < 600 RETURN DISTINCT n
Execution done
Node size is 114741
Edge size is 0
Took 2782 ms to execute baseline query
Baseline returned 114741 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 8709ms to create views
baseline V15 MATCH (p2:Post)-[:HAS_TAG]-(t) WHERE t.tagId='html' RETURN DISTINCT p2
Executing query: MATCH (p2:Post)-[:HAS_TAG]-(t) WHERE t.tagId='html' RETURN DISTINCT p2
Execution done
Node size is 58015
Edge size is 0
Took 2563 ms to execute baseline query
Baseline returned 58015 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 8180ms to create views
baseline V4 MATCH (n:User) WHERE n.reputation > 90000 RETURN DISTINCT n
Executing query: MATCH (n:User) WHERE n.reputation > 90000 RETURN DISTINCT n
Execution done
Node size is 313
Edge size is 0
Took 121 ms to execute baseline query
Baseline returned 313 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 8178ms to create views
baseline G5 MATCH (n:Tag) WHERE n.tagId = 'java' OR n.tagId = 'html' WITH n MATCH(n)-[:HAS_TAG]-(p:Post) RETURN DISTINCT p
Executing query: MATCH (n:Tag) WHERE n.tagId = 'java' OR n.tagId = 'html' WITH n MATCH(n)-[:HAS_TAG]-(p:Post) RETURN DISTINCT p
Execution done
Node size is 191539
Edge size is 0
Took 675 ms to execute baseline query
Baseline returned 191539 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 8424ms to create views
baseline V20 MATCH (n:Post)-[:HAS_TAG]-(t) WHERE n.postId = '1065111' RETURN DISTINCT t
Executing query: MATCH (n:Post)-[:HAS_TAG]-(t) WHERE n.postId = '1065111' RETURN DISTINCT t
Execution done
Node size is 3
Edge size is 0
Took 1874 ms to execute baseline query
Baseline returned 3 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 8363ms to create views
baseline V6 MATCH p = (n:User)-[:POSTED]-(po:Post) WHERE n.reputation < 500 RETURN p
Executing query: MATCH p = (n:User)-[:POSTED]-(po:Post) WHERE n.reputation < 500 RETURN p
Execution done
Node size is 42081
Edge size is 34096
Took 643 ms to execute baseline query
Baseline returned 76177 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 8297ms to create views
baseline V20 MATCH (n:Post)-[:HAS_TAG]-(t) WHERE n.postId = '1065111' RETURN DISTINCT t
Executing query: MATCH (n:Post)-[:HAS_TAG]-(t) WHERE n.postId = '1065111' RETURN DISTINCT t
Execution done
Node size is 3
Edge size is 0
Took 1917 ms to execute baseline query
Baseline returned 3 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 8640ms to create views
baseline L1_8 MATCH (n:User)-[:POSTED]-(po:Post)-[:PARENT_OF]-(po2:Post) WHERE n.upvotes > 800 AND po.comments > 10 AND po2.score > 350 RETURN DISTINCT po2
Executing query: MATCH (n:User)-[:POSTED]-(po:Post)-[:PARENT_OF]-(po2:Post) WHERE n.upvotes > 800 AND po.comments > 10 AND po2.score > 350 RETURN DISTINCT po2
Execution done
Node size is 983
Edge size is 0
Took 1210 ms to execute baseline query
Baseline returned 983 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 8500ms to create views
baseline V18 MATCH (n:User)-[:POSTED]-(po:Post)-[:PARENT_OF]-(po2:Post) WHERE n.upvotes > 0 AND po.comments > 10 AND po2.comments<10  RETURN DISTINCT po2
Executing query: MATCH (n:User)-[:POSTED]-(po:Post)-[:PARENT_OF]-(po2:Post) WHERE n.upvotes > 0 AND po.comments > 10 AND po2.comments<10  RETURN DISTINCT po2
Execution done
Node size is 16223
Edge size is 0
Took 1853 ms to execute baseline query
Baseline returned 16223 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 8259ms to create views
baseline G15 MATCH (p:Post)-[:HAS_TAG]-(t) WHERE t.tagId='html' WITH p MATCH (p)-[:POSTED]-(m:User) RETURN DISTINCT m
Executing query: MATCH (p:Post)-[:HAS_TAG]-(t) WHERE t.tagId='html' WITH p MATCH (p)-[:POSTED]-(m:User) RETURN DISTINCT m
Execution done
Node size is 3118
Edge size is 0
Took 2856 ms to execute baseline query
Baseline returned 3118 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 8886ms to create views
baseline V4 MATCH (n:User) WHERE n.reputation > 90000 RETURN DISTINCT n
Executing query: MATCH (n:User) WHERE n.reputation > 90000 RETURN DISTINCT n
Execution done
Node size is 313
Edge size is 0
Took 126 ms to execute baseline query
Baseline returned 313 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 8453ms to create views
baseline V7 MATCH (n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 100 AND m.score < 600 RETURN DISTINCT n
Executing query: MATCH (n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 100 AND m.score < 600 RETURN DISTINCT n
Execution done
Node size is 114741
Edge size is 0
Took 2458 ms to execute baseline query
Baseline returned 114741 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 8370ms to create views
baseline G20 MATCH (n:Post)-[:HAS_TAG]-(t) WHERE n.postId = '1065111' WITH t MATCH (t)-[:HAS_TAG]-(p:Post) RETURN DISTINCT p
Executing query: MATCH (n:Post)-[:HAS_TAG]-(t) WHERE n.postId = '1065111' WITH t MATCH (t)-[:HAS_TAG]-(p:Post) RETURN DISTINCT p
Execution done
Node size is 13270
Edge size is 0
Took 2222 ms to execute baseline query
Baseline returned 13270 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 8384ms to create views
baseline V5 MATCH (n:Tag) WHERE n.tagId = 'java' OR n.tagId = 'html' RETURN DISTINCT n
Executing query: MATCH (n:Tag) WHERE n.tagId = 'java' OR n.tagId = 'html' RETURN DISTINCT n
Execution done
Node size is 2
Edge size is 0
Took 126 ms to execute baseline query
Baseline returned 2 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 8472ms to create views
baseline V15 MATCH (p2:Post)-[:HAS_TAG]-(t) WHERE t.tagId='html' RETURN DISTINCT p2
Executing query: MATCH (p2:Post)-[:HAS_TAG]-(t) WHERE t.tagId='html' RETURN DISTINCT p2
Execution done
Node size is 58015
Edge size is 0
Took 2231 ms to execute baseline query
Baseline returned 58015 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 8676ms to create views
baseline V17 MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User) WHERE n.userId<m.userId AND n.reputation>m.reputation RETURN DISTINCT m
Executing query: MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User) WHERE n.userId<m.userId AND n.reputation>m.reputation RETURN DISTINCT m
Execution done
Node size is 22714
Edge size is 0
Took 7707 ms to execute baseline query
Baseline returned 22714 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 8477ms to create views
baseline G5 MATCH (n:Tag) WHERE n.tagId = 'java' OR n.tagId = 'html' WITH n MATCH(n)-[:HAS_TAG]-(p:Post) RETURN DISTINCT p
Executing query: MATCH (n:Tag) WHERE n.tagId = 'java' OR n.tagId = 'html' WITH n MATCH(n)-[:HAS_TAG]-(p:Post) RETURN DISTINCT p
Execution done
Node size is 191539
Edge size is 0
Took 807 ms to execute baseline query
Baseline returned 191539 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 8103ms to create views
baseline V8 MATCH (n:User)-[:POSTED]-(po:Post)-[:PARENT_OF]-(po2:Post) WHERE n.upvotes > 800 AND po.comments > 10  RETURN DISTINCT po2
Executing query: MATCH (n:User)-[:POSTED]-(po:Post)-[:PARENT_OF]-(po2:Post) WHERE n.upvotes > 800 AND po.comments > 10  RETURN DISTINCT po2
Execution done
Node size is 11173
Edge size is 0
Took 1357 ms to execute baseline query
Baseline returned 11173 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 8410ms to create views
baseline V16 MATCH p = (n:User)-[:POSTED]-(po:Post) WHERE n.reputation < 50000 RETURN DISTINCT p
Executing query: MATCH p = (n:User)-[:POSTED]-(po:Post) WHERE n.reputation < 50000 RETURN DISTINCT p
Execution done
Node size is 971805
Edge size is 948097
Took 3482 ms to execute baseline query
Baseline returned 1919902 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 8274ms to create views
baseline V19 MATCH (n:Post)-[:PARENT_OF]-(m:Post) WHERE n.score =15 AND m.score = 50 RETURN DISTINCT n
Executing query: MATCH (n:Post)-[:PARENT_OF]-(m:Post) WHERE n.score =15 AND m.score = 50 RETURN DISTINCT n
Execution done
Node size is 37
Edge size is 0
Took 1562 ms to execute baseline query
Baseline returned 37 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 8601ms to create views
baseline L18_19 MATCH (n:User)-[:POSTED]-(po:Post)-[:PARENT_OF]-(po2:Post) WHERE n.upvotes > 0 AND po.comments > 10 AND po2.comments<10  WITH po2 MATCH (po2)-[:PARENT_OF]-(po3:Post) WHERE po2.score =15 AND po3.score = 50 RETURN DISTINCT po2
Executing query: MATCH (n:User)-[:POSTED]-(po:Post)-[:PARENT_OF]-(po2:Post) WHERE n.upvotes > 0 AND po.comments > 10 AND po2.comments<10  WITH po2 MATCH (po2)-[:PARENT_OF]-(po3:Post) WHERE po2.score =15 AND po3.score = 50 RETURN DISTINCT po2
Execution done
Node size is 0
Edge size is 0
Took 2121 ms to execute baseline query
Baseline returned 0 nodes (or edges)
************************************

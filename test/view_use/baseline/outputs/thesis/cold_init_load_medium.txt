neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 13485ms to create views
baseline G15 MATCH (p:Post)-[:HAS_TAG]-(t) WHERE t.tagId='html' WITH p MATCH (p)-[:POSTED]-(m:User) RETURN DISTINCT m
Executing query: MATCH (p:Post)-[:HAS_TAG]-(t) WHERE t.tagId='html' WITH p MATCH (p)-[:POSTED]-(m:User) RETURN DISTINCT m
Execution done
Node size is 9914
Edge size is 0
Took 7335 ms to execute baseline query
Baseline returned 9914 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 13955ms to create views
baseline V18 MATCH (n:User)-[:POSTED]-(po:Post)-[:PARENT_OF]-(po2:Post) WHERE n.upvotes > 0 AND po.comments > 10 AND po2.comments<10  RETURN DISTINCT po2
Executing query: MATCH (n:User)-[:POSTED]-(po:Post)-[:PARENT_OF]-(po2:Post) WHERE n.upvotes > 0 AND po.comments > 10 AND po2.comments<10  RETURN DISTINCT po2
Execution done
Node size is 37216
Edge size is 0
Took 4688 ms to execute baseline query
Baseline returned 37216 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 14273ms to create views
baseline V6 MATCH p = (n:User)-[:POSTED]-(po:Post) WHERE n.reputation < 500 RETURN p
Executing query: MATCH p = (n:User)-[:POSTED]-(po:Post) WHERE n.reputation < 500 RETURN p
Execution done
Node size is 201262
Edge size is 160720
Took 1262 ms to execute baseline query
Baseline returned 361982 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 14022ms to create views
baseline L18_19 MATCH (n:User)-[:POSTED]-(po:Post)-[:PARENT_OF]-(po2:Post) WHERE n.upvotes > 0 AND po.comments > 10 AND po2.comments<10  WITH po2 MATCH (po2)-[:PARENT_OF]-(po3:Post) WHERE po2.score =15 AND po3.score = 50 RETURN DISTINCT po2
Executing query: MATCH (n:User)-[:POSTED]-(po:Post)-[:PARENT_OF]-(po2:Post) WHERE n.upvotes > 0 AND po.comments > 10 AND po2.comments<10  WITH po2 MATCH (po2)-[:PARENT_OF]-(po3:Post) WHERE po2.score =15 AND po3.score = 50 RETURN DISTINCT po2
Execution done
Node size is 1
Edge size is 0
Took 4214 ms to execute baseline query
Baseline returned 1 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 13722ms to create views
baseline V5 MATCH (n:Tag) WHERE n.tagId = 'java' OR n.tagId = 'html' RETURN DISTINCT n
Executing query: MATCH (n:Tag) WHERE n.tagId = 'java' OR n.tagId = 'html' RETURN DISTINCT n
Execution done
Node size is 2
Edge size is 0
Took 135 ms to execute baseline query
Baseline returned 2 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 13501ms to create views
baseline V19 MATCH (n:Post)-[:PARENT_OF]-(m:Post) WHERE n.score =15 AND m.score = 50 RETURN DISTINCT n
Executing query: MATCH (n:Post)-[:PARENT_OF]-(m:Post) WHERE n.score =15 AND m.score = 50 RETURN DISTINCT n
Execution done
Node size is 48
Edge size is 0
Took 2254 ms to execute baseline query
Baseline returned 48 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 13737ms to create views
baseline G20 MATCH (n:Post)-[:HAS_TAG]-(t) WHERE n.postId = '1065111' WITH t MATCH (t)-[:HAS_TAG]-(p:Post) RETURN DISTINCT p
Executing query: MATCH (n:Post)-[:HAS_TAG]-(t) WHERE n.postId = '1065111' WITH t MATCH (t)-[:HAS_TAG]-(p:Post) RETURN DISTINCT p
Execution done
Node size is 21995
Edge size is 0
Took 3397 ms to execute baseline query
Baseline returned 21995 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 14291ms to create views
baseline V8 MATCH (n:User)-[:POSTED]-(po:Post)-[:PARENT_OF]-(po2:Post) WHERE n.upvotes > 800 AND po.comments > 10  RETURN DISTINCT po2
Executing query: MATCH (n:User)-[:POSTED]-(po:Post)-[:PARENT_OF]-(po2:Post) WHERE n.upvotes > 800 AND po.comments > 10  RETURN DISTINCT po2
Execution done
Node size is 23682
Edge size is 0
Took 2408 ms to execute baseline query
Baseline returned 23682 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 13750ms to create views
baseline L1_8 MATCH (n:User)-[:POSTED]-(po:Post)-[:PARENT_OF]-(po2:Post) WHERE n.upvotes > 800 AND po.comments > 10 AND po2.score > 350 RETURN DISTINCT po2
Executing query: MATCH (n:User)-[:POSTED]-(po:Post)-[:PARENT_OF]-(po2:Post) WHERE n.upvotes > 800 AND po.comments > 10 AND po2.score > 350 RETURN DISTINCT po2
Execution done
Node size is 1492
Edge size is 0
Took 2392 ms to execute baseline query
Baseline returned 1492 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 13740ms to create views
baseline V17 MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User) WHERE n.userId<m.userId AND n.reputation>m.reputation RETURN DISTINCT m
Executing query: MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User) WHERE n.userId<m.userId AND n.reputation>m.reputation RETURN DISTINCT m
Execution done
Node size is 77209
Edge size is 0
Took 19177 ms to execute baseline query
Baseline returned 77209 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 13468ms to create views
baseline V16 MATCH p = (n:User)-[:POSTED]-(po:Post) WHERE n.reputation < 50000 RETURN DISTINCT p
Executing query: MATCH p = (n:User)-[:POSTED]-(po:Post) WHERE n.reputation < 50000 RETURN DISTINCT p
Execution done
Node size is 2724728
Edge size is 2641409
Took 10327 ms to execute baseline query
Baseline returned 5366137 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 13830ms to create views
baseline V7 MATCH (n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 100 AND m.score < 600 RETURN DISTINCT n
Executing query: MATCH (n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 100 AND m.score < 600 RETURN DISTINCT n
Execution done
Node size is 145248
Edge size is 0
Took 4430 ms to execute baseline query
Baseline returned 145248 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 14161ms to create views
baseline V15 MATCH (p2:Post)-[:HAS_TAG]-(t) WHERE t.tagId='html' RETURN DISTINCT p2
Executing query: MATCH (p2:Post)-[:HAS_TAG]-(t) WHERE t.tagId='html' RETURN DISTINCT p2
Execution done
Node size is 106750
Edge size is 0
Took 3292 ms to execute baseline query
Baseline returned 106750 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 14107ms to create views
baseline V4 MATCH (n:User) WHERE n.reputation > 90000 RETURN DISTINCT n
Executing query: MATCH (n:User) WHERE n.reputation > 90000 RETURN DISTINCT n
Execution done
Node size is 535
Edge size is 0
Took 211 ms to execute baseline query
Baseline returned 535 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 13407ms to create views
baseline G5 MATCH (n:Tag) WHERE n.tagId = 'java' OR n.tagId = 'html' WITH n MATCH(n)-[:HAS_TAG]-(p:Post) RETURN DISTINCT p
Executing query: MATCH (n:Tag) WHERE n.tagId = 'java' OR n.tagId = 'html' WITH n MATCH(n)-[:HAS_TAG]-(p:Post) RETURN DISTINCT p
Execution done
Node size is 339435
Edge size is 0
Took 850 ms to execute baseline query
Baseline returned 339435 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 14307ms to create views
baseline V20 MATCH (n:Post)-[:HAS_TAG]-(t) WHERE n.postId = '1065111' RETURN DISTINCT t
Executing query: MATCH (n:Post)-[:HAS_TAG]-(t) WHERE n.postId = '1065111' RETURN DISTINCT t
Execution done
Node size is 3
Edge size is 0
Took 3172 ms to execute baseline query
Baseline returned 3 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 13404ms to create views
baseline V6 MATCH p = (n:User)-[:POSTED]-(po:Post) WHERE n.reputation < 500 RETURN p
Executing query: MATCH p = (n:User)-[:POSTED]-(po:Post) WHERE n.reputation < 500 RETURN p
Execution done
Node size is 201262
Edge size is 160720
Took 1380 ms to execute baseline query
Baseline returned 361982 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 13552ms to create views
baseline V20 MATCH (n:Post)-[:HAS_TAG]-(t) WHERE n.postId = '1065111' RETURN DISTINCT t
Executing query: MATCH (n:Post)-[:HAS_TAG]-(t) WHERE n.postId = '1065111' RETURN DISTINCT t
Execution done
Node size is 3
Edge size is 0
Took 3101 ms to execute baseline query
Baseline returned 3 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 13978ms to create views
baseline L1_8 MATCH (n:User)-[:POSTED]-(po:Post)-[:PARENT_OF]-(po2:Post) WHERE n.upvotes > 800 AND po.comments > 10 AND po2.score > 350 RETURN DISTINCT po2
Executing query: MATCH (n:User)-[:POSTED]-(po:Post)-[:PARENT_OF]-(po2:Post) WHERE n.upvotes > 800 AND po.comments > 10 AND po2.score > 350 RETURN DISTINCT po2
Execution done
Node size is 1492
Edge size is 0
Took 2218 ms to execute baseline query
Baseline returned 1492 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 13918ms to create views
baseline V18 MATCH (n:User)-[:POSTED]-(po:Post)-[:PARENT_OF]-(po2:Post) WHERE n.upvotes > 0 AND po.comments > 10 AND po2.comments<10  RETURN DISTINCT po2
Executing query: MATCH (n:User)-[:POSTED]-(po:Post)-[:PARENT_OF]-(po2:Post) WHERE n.upvotes > 0 AND po.comments > 10 AND po2.comments<10  RETURN DISTINCT po2
Execution done
Node size is 37216
Edge size is 0
Took 4626 ms to execute baseline query
Baseline returned 37216 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 13721ms to create views
baseline G15 MATCH (p:Post)-[:HAS_TAG]-(t) WHERE t.tagId='html' WITH p MATCH (p)-[:POSTED]-(m:User) RETURN DISTINCT m
Executing query: MATCH (p:Post)-[:HAS_TAG]-(t) WHERE t.tagId='html' WITH p MATCH (p)-[:POSTED]-(m:User) RETURN DISTINCT m
Execution done
Node size is 9914
Edge size is 0
Took 7151 ms to execute baseline query
Baseline returned 9914 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 13518ms to create views
baseline V4 MATCH (n:User) WHERE n.reputation > 90000 RETURN DISTINCT n
Executing query: MATCH (n:User) WHERE n.reputation > 90000 RETURN DISTINCT n
Execution done
Node size is 535
Edge size is 0
Took 185 ms to execute baseline query
Baseline returned 535 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 13578ms to create views
baseline V7 MATCH (n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 100 AND m.score < 600 RETURN DISTINCT n
Executing query: MATCH (n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 100 AND m.score < 600 RETURN DISTINCT n
Execution done
Node size is 145248
Edge size is 0
Took 4546 ms to execute baseline query
Baseline returned 145248 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 13594ms to create views
baseline G20 MATCH (n:Post)-[:HAS_TAG]-(t) WHERE n.postId = '1065111' WITH t MATCH (t)-[:HAS_TAG]-(p:Post) RETURN DISTINCT p
Executing query: MATCH (n:Post)-[:HAS_TAG]-(t) WHERE n.postId = '1065111' WITH t MATCH (t)-[:HAS_TAG]-(p:Post) RETURN DISTINCT p
Execution done
Node size is 21995
Edge size is 0
Took 3401 ms to execute baseline query
Baseline returned 21995 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 13656ms to create views
baseline V5 MATCH (n:Tag) WHERE n.tagId = 'java' OR n.tagId = 'html' RETURN DISTINCT n
Executing query: MATCH (n:Tag) WHERE n.tagId = 'java' OR n.tagId = 'html' RETURN DISTINCT n
Execution done
Node size is 2
Edge size is 0
Took 128 ms to execute baseline query
Baseline returned 2 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 13682ms to create views
baseline V15 MATCH (p2:Post)-[:HAS_TAG]-(t) WHERE t.tagId='html' RETURN DISTINCT p2
Executing query: MATCH (p2:Post)-[:HAS_TAG]-(t) WHERE t.tagId='html' RETURN DISTINCT p2
Execution done
Node size is 106750
Edge size is 0
Took 3931 ms to execute baseline query
Baseline returned 106750 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 13966ms to create views
baseline V17 MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User) WHERE n.userId<m.userId AND n.reputation>m.reputation RETURN DISTINCT m
Executing query: MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User) WHERE n.userId<m.userId AND n.reputation>m.reputation RETURN DISTINCT m
Execution done
Node size is 77209
Edge size is 0
Took 15731 ms to execute baseline query
Baseline returned 77209 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 13570ms to create views
baseline G5 MATCH (n:Tag) WHERE n.tagId = 'java' OR n.tagId = 'html' WITH n MATCH(n)-[:HAS_TAG]-(p:Post) RETURN DISTINCT p
Executing query: MATCH (n:Tag) WHERE n.tagId = 'java' OR n.tagId = 'html' WITH n MATCH(n)-[:HAS_TAG]-(p:Post) RETURN DISTINCT p
Execution done
Node size is 339435
Edge size is 0
Took 1010 ms to execute baseline query
Baseline returned 339435 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 13483ms to create views
baseline V8 MATCH (n:User)-[:POSTED]-(po:Post)-[:PARENT_OF]-(po2:Post) WHERE n.upvotes > 800 AND po.comments > 10  RETURN DISTINCT po2
Executing query: MATCH (n:User)-[:POSTED]-(po:Post)-[:PARENT_OF]-(po2:Post) WHERE n.upvotes > 800 AND po.comments > 10  RETURN DISTINCT po2
Execution done
Node size is 23682
Edge size is 0
Took 2806 ms to execute baseline query
Baseline returned 23682 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 14759ms to create views
baseline V16 MATCH p = (n:User)-[:POSTED]-(po:Post) WHERE n.reputation < 50000 RETURN DISTINCT p
Executing query: MATCH p = (n:User)-[:POSTED]-(po:Post) WHERE n.reputation < 50000 RETURN DISTINCT p
Execution done
Node size is 2724728
Edge size is 2641409
Took 9808 ms to execute baseline query
Baseline returned 5366137 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 13687ms to create views
baseline V19 MATCH (n:Post)-[:PARENT_OF]-(m:Post) WHERE n.score =15 AND m.score = 50 RETURN DISTINCT n
Executing query: MATCH (n:Post)-[:PARENT_OF]-(m:Post) WHERE n.score =15 AND m.score = 50 RETURN DISTINCT n
Execution done
Node size is 48
Edge size is 0
Took 2708 ms to execute baseline query
Baseline returned 48 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
In enterRoot ctx is CREATE VIEW ASV_testMATCH(n:Post)WHEREn.postId='3468801'RETURNn
ViewSql is CREATE VIEW AS V_test MATCH (n:Post) WHERE n.postId = '3468801' RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.postId = '3468801' SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V_test" IN n.views THEN [] ELSE ["V_test"] END) + n.views
Execution done
There are 1 nodes
Took 13686ms to create views
baseline L18_19 MATCH (n:User)-[:POSTED]-(po:Post)-[:PARENT_OF]-(po2:Post) WHERE n.upvotes > 0 AND po.comments > 10 AND po2.comments<10  WITH po2 MATCH (po2)-[:PARENT_OF]-(po3:Post) WHERE po2.score =15 AND po3.score = 50 RETURN DISTINCT po2
Executing query: MATCH (n:User)-[:POSTED]-(po:Post)-[:PARENT_OF]-(po2:Post) WHERE n.upvotes > 0 AND po.comments > 10 AND po2.comments<10  WITH po2 MATCH (po2)-[:PARENT_OF]-(po3:Post) WHERE po2.score =15 AND po3.score = 50 RETURN DISTINCT po2
Execution done
Node size is 1
Edge size is 0
Took 4281 ms to execute baseline query
Baseline returned 1 nodes (or edges)
************************************

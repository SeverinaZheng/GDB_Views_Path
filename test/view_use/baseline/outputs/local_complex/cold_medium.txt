neo4j graph connector set-up done.
2
baseline U1 MATCH p=(po:Post)-[:PARENT_OF]-(m:Post)-[:POSTED]-(n:User) WHERE n.reputation < 850 AND m.score > 300 AND m.score < 450  RETURN m
Executing query: MATCH p=(po:Post)-[:PARENT_OF]-(m:Post)-[:POSTED]-(n:User) WHERE n.reputation < 850 AND m.score > 300 AND m.score < 450  RETURN m
Execution done
Node size is 4
Edge size is 0
Took 14209 ms to execute baseline query
Baseline returned 4 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
baseline U2 MATCH p=(n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]-(worstPost:Post) WHERE n.reputation < 850 AND worstPost.score < 10 AND betterPost.score > worstPost.score * 10 RETURN betterPost
Executing query: MATCH p=(n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]-(worstPost:Post) WHERE n.reputation < 850 AND worstPost.score < 10 AND betterPost.score > worstPost.score * 10 RETURN betterPost
Execution done
Node size is 52195
Edge size is 0
Took 14908 ms to execute baseline query
Baseline returned 52195 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
baseline U3 MATCH p=(m:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]->(worstPost:Post)-[:POSTED]-(n:User) WHERE n.userId < m.userId AND worstPost.score < 10 AND betterPost.score > worstPost.score * 10 RETURN p
Executing query: MATCH p=(m:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]->(worstPost:Post)-[:POSTED]-(n:User) WHERE n.userId < m.userId AND worstPost.score < 10 AND betterPost.score > worstPost.score * 10 RETURN p
Execution done
Node size is 357124
Edge size is 490686
Took 26681 ms to execute baseline query
Baseline returned 847810 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
baseline U4 MATCH p=(n:User)-[:POSTED]-(po:Post)-[:HAS_TAG]-(t:Tag)-[:HAS_TAG]-(po2:Post)-[:POSTED]-(n) WHERE t.tagId = 'java' OR t.tagId = 'c#' AND n.upvotes > 400 RETURN n
Executing query: MATCH p=(n:User)-[:POSTED]-(po:Post)-[:HAS_TAG]-(t:Tag)-[:HAS_TAG]-(po2:Post)-[:POSTED]-(n) WHERE t.tagId = 'java' OR t.tagId = 'c#' AND n.upvotes > 400 RETURN n
Execution done
Node size is 10201
Edge size is 0
Took 17177 ms to execute baseline query
Baseline returned 10201 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
baseline U5 MATCH p=(n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]->(worstPost:Post) WHERE worstPost.score < 10 AND betterPost.score > worstPost.score * 10 AND betterPost.score < 1500 AND betterPost.score > 10 RETURN betterPost
Executing query: MATCH p=(n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]->(worstPost:Post) WHERE worstPost.score < 10 AND betterPost.score > worstPost.score * 10 AND betterPost.score < 1500 AND betterPost.score > 10 RETURN betterPost
Execution done
Node size is 70420
Edge size is 0
Took 21937 ms to execute baseline query
Baseline returned 70420 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
baseline U1 MATCH p=(po:Post)-[:PARENT_OF]-(m:Post)-[:POSTED]-(n:User) WHERE n.reputation < 850 AND m.score > 300 AND m.score < 450  RETURN m
Executing query: MATCH p=(po:Post)-[:PARENT_OF]-(m:Post)-[:POSTED]-(n:User) WHERE n.reputation < 850 AND m.score > 300 AND m.score < 450  RETURN m
Execution done
Node size is 4
Edge size is 0
Took 14200 ms to execute baseline query
Baseline returned 4 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
baseline U2 MATCH p=(n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]-(worstPost:Post) WHERE n.reputation < 850 AND worstPost.score < 10 AND betterPost.score > worstPost.score * 10 RETURN betterPost
Executing query: MATCH p=(n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]-(worstPost:Post) WHERE n.reputation < 850 AND worstPost.score < 10 AND betterPost.score > worstPost.score * 10 RETURN betterPost
Execution done
Node size is 52195
Edge size is 0
Took 14725 ms to execute baseline query
Baseline returned 52195 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
baseline U3 MATCH p=(m:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]->(worstPost:Post)-[:POSTED]-(n:User) WHERE n.userId < m.userId AND worstPost.score < 10 AND betterPost.score > worstPost.score * 10 RETURN p
Executing query: MATCH p=(m:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]->(worstPost:Post)-[:POSTED]-(n:User) WHERE n.userId < m.userId AND worstPost.score < 10 AND betterPost.score > worstPost.score * 10 RETURN p
Execution done
Node size is 357124
Edge size is 490686
Took 26470 ms to execute baseline query
Baseline returned 847810 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
baseline U4 MATCH p=(n:User)-[:POSTED]-(po:Post)-[:HAS_TAG]-(t:Tag)-[:HAS_TAG]-(po2:Post)-[:POSTED]-(n) WHERE t.tagId = 'java' OR t.tagId = 'c#' AND n.upvotes > 400 RETURN n
Executing query: MATCH p=(n:User)-[:POSTED]-(po:Post)-[:HAS_TAG]-(t:Tag)-[:HAS_TAG]-(po2:Post)-[:POSTED]-(n) WHERE t.tagId = 'java' OR t.tagId = 'c#' AND n.upvotes > 400 RETURN n
Execution done
Node size is 10201
Edge size is 0
Took 16909 ms to execute baseline query
Baseline returned 10201 nodes (or edges)
************************************
neo4j graph connector set-up done.
2
baseline U5 MATCH p=(n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]->(worstPost:Post) WHERE worstPost.score < 10 AND betterPost.score > worstPost.score * 10 AND betterPost.score < 1500 AND betterPost.score > 10 RETURN betterPost
Executing query: MATCH p=(n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]->(worstPost:Post) WHERE worstPost.score < 10 AND betterPost.score > worstPost.score * 10 AND betterPost.score < 1500 AND betterPost.score > 10 RETURN betterPost
Execution done
Node size is 70420
Edge size is 0
Took 21691 ms to execute baseline query
Baseline returned 70420 nodes (or edges)
************************************

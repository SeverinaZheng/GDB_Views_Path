baseline U5 MATCH (n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]-(worstPost:Post) WHERE worstPost.score < 10 AND betterPost.score > worstPost.score * 10 AND n.upvotes > 400 RETURN DISTINCT n
Executing query: MATCH (n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]-(worstPost:Post) WHERE worstPost.score < 10 AND betterPost.score > worstPost.score * 10 AND n.upvotes > 400 RETURN DISTINCT n
Execution done
Node size is 5096
Edge size is 0
Took 11584 ms to execute baseline query
Baseline returned 5096 nodes (or edges)
*********************************
baseline U2 MATCH p=(n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 200 AND n.score > 200 AND n.score < 1500 RETURN DISTINCT n
Executing query: MATCH p=(n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 200 AND n.score > 200 AND n.score < 1500 RETURN DISTINCT n
Execution done
Node size is 16437
Edge size is 0
Took 1675 ms to execute baseline query
Baseline returned 16437 nodes (or edges)
*********************************
baseline U1 MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User) WHERE n.userId<m.userId AND p1.score < p2.score WITH m MATCH p=(m)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]->(worstPost:Post) WHERE m.reputation < 850 AND worstPost.score < 10 AND betterPost.score > worstPost.score * 10 RETURN DISTINCT m
Executing query: MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User) WHERE n.userId<m.userId AND p1.score < p2.score WITH m MATCH p=(m)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]->(worstPost:Post) WHERE m.reputation < 850 AND worstPost.score < 10 AND betterPost.score > worstPost.score * 10 RETURN DISTINCT m
Execution done
Node size is 3990
Edge size is 0
Took 892 ms to execute baseline query
Baseline returned 3990 nodes (or edges)
*********************************
baseline U3 MATCH p=(n:User)-[:POSTED]-(po:Post)-[:HAS_TAG]-(t:Tag)-[:HAS_TAG]-(po2:Post)-[:POSTED]-(n) WHERE t.tagId = 'java' WITH CASE WHEN po.score > 38 AND po2.score > 38 THEN [po, po2] WHEN po.score > 38 THEN [po] WHEN po2.score > 38 THEN [po2] END AS result UNWIND result AS node RETURN DISTINCT node
Executing query: MATCH p=(n:User)-[:POSTED]-(po:Post)-[:HAS_TAG]-(t:Tag)-[:HAS_TAG]-(po2:Post)-[:POSTED]-(n) WHERE t.tagId = 'java' WITH CASE WHEN po.score > 38 AND po2.score > 38 THEN [po, po2] WHEN po.score > 38 THEN [po] WHEN po2.score > 38 THEN [po2] END AS result UNWIND result AS node RETURN DISTINCT node
Execution done
Node size is 1548
Edge size is 0
Took 1285 ms to execute baseline query
Baseline returned 1548 nodes (or edges)
*********************************
baseline U4 MATCH p=(n:User)-[:POSTED]-(po:Post) WHERE po.score > 38 WITH COLLECT(po) AS firstPosts MATCH (n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 300 AND m.score < 450 WITH firstPosts, COLLECT(n) +  COLLECT(m) AS secondPosts WITH [x IN firstPosts WHERE x IN secondPosts] AS commonNodes UNWIND commonNodes AS commonNode RETURN DISTINCT commonNode
Executing query: MATCH p=(n:User)-[:POSTED]-(po:Post) WHERE po.score > 38 WITH COLLECT(po) AS firstPosts MATCH (n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 300 AND m.score < 450 WITH firstPosts, COLLECT(n) +  COLLECT(m) AS secondPosts WITH [x IN firstPosts WHERE x IN secondPosts] AS commonNodes UNWIND commonNodes AS commonNode RETURN DISTINCT commonNode
Execution done
Node size is 5539
Edge size is 0
Took 3234 ms to execute baseline query
Baseline returned 5539 nodes (or edges)
*********************************
baseline U1 MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User) WHERE n.userId<m.userId AND p1.score < p2.score WITH m MATCH p=(m)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]->(worstPost:Post) WHERE m.reputation < 850 AND worstPost.score < 10 AND betterPost.score > worstPost.score * 10 RETURN DISTINCT m
Executing query: MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User) WHERE n.userId<m.userId AND p1.score < p2.score WITH m MATCH p=(m)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]->(worstPost:Post) WHERE m.reputation < 850 AND worstPost.score < 10 AND betterPost.score > worstPost.score * 10 RETURN DISTINCT m
Execution done
Node size is 3990
Edge size is 0
Took 552 ms to execute baseline query
Baseline returned 3990 nodes (or edges)
*********************************
baseline U5 MATCH (n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]-(worstPost:Post) WHERE worstPost.score < 10 AND betterPost.score > worstPost.score * 10 AND n.upvotes > 400 RETURN DISTINCT n
Executing query: MATCH (n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]-(worstPost:Post) WHERE worstPost.score < 10 AND betterPost.score > worstPost.score * 10 AND n.upvotes > 400 RETURN DISTINCT n
Execution done
Node size is 5096
Edge size is 0
Took 2900 ms to execute baseline query
Baseline returned 5096 nodes (or edges)
*********************************
baseline U3 MATCH p=(n:User)-[:POSTED]-(po:Post)-[:HAS_TAG]-(t:Tag)-[:HAS_TAG]-(po2:Post)-[:POSTED]-(n) WHERE t.tagId = 'java' WITH CASE WHEN po.score > 38 AND po2.score > 38 THEN [po, po2] WHEN po.score > 38 THEN [po] WHEN po2.score > 38 THEN [po2] END AS result UNWIND result AS node RETURN DISTINCT node
Executing query: MATCH p=(n:User)-[:POSTED]-(po:Post)-[:HAS_TAG]-(t:Tag)-[:HAS_TAG]-(po2:Post)-[:POSTED]-(n) WHERE t.tagId = 'java' WITH CASE WHEN po.score > 38 AND po2.score > 38 THEN [po, po2] WHEN po.score > 38 THEN [po] WHEN po2.score > 38 THEN [po2] END AS result UNWIND result AS node RETURN DISTINCT node
Execution done
Node size is 1548
Edge size is 0
Took 1006 ms to execute baseline query
Baseline returned 1548 nodes (or edges)
*********************************
baseline U2 MATCH p=(n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 200 AND n.score > 200 AND n.score < 1500 RETURN DISTINCT n
Executing query: MATCH p=(n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 200 AND n.score > 200 AND n.score < 1500 RETURN DISTINCT n
Execution done
Node size is 16437
Edge size is 0
Took 1314 ms to execute baseline query
Baseline returned 16437 nodes (or edges)
*********************************
baseline U4 MATCH p=(n:User)-[:POSTED]-(po:Post) WHERE po.score > 38 WITH COLLECT(po) AS firstPosts MATCH (n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 300 AND m.score < 450 WITH firstPosts, COLLECT(n) +  COLLECT(m) AS secondPosts WITH [x IN firstPosts WHERE x IN secondPosts] AS commonNodes UNWIND commonNodes AS commonNode RETURN DISTINCT commonNode
Executing query: MATCH p=(n:User)-[:POSTED]-(po:Post) WHERE po.score > 38 WITH COLLECT(po) AS firstPosts MATCH (n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 300 AND m.score < 450 WITH firstPosts, COLLECT(n) +  COLLECT(m) AS secondPosts WITH [x IN firstPosts WHERE x IN secondPosts] AS commonNodes UNWIND commonNodes AS commonNode RETURN DISTINCT commonNode
Execution done
Node size is 5539
Edge size is 0
Took 3062 ms to execute baseline query
Baseline returned 5539 nodes (or edges)
*********************************
baseline U2 MATCH p=(n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 200 AND n.score > 200 AND n.score < 1500 RETURN DISTINCT n
Executing query: MATCH p=(n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 200 AND n.score > 200 AND n.score < 1500 RETURN DISTINCT n
Execution done
Node size is 16437
Edge size is 0
Took 1347 ms to execute baseline query
Baseline returned 16437 nodes (or edges)
*********************************
baseline U3 MATCH p=(n:User)-[:POSTED]-(po:Post)-[:HAS_TAG]-(t:Tag)-[:HAS_TAG]-(po2:Post)-[:POSTED]-(n) WHERE t.tagId = 'java' WITH CASE WHEN po.score > 38 AND po2.score > 38 THEN [po, po2] WHEN po.score > 38 THEN [po] WHEN po2.score > 38 THEN [po2] END AS result UNWIND result AS node RETURN DISTINCT node
Executing query: MATCH p=(n:User)-[:POSTED]-(po:Post)-[:HAS_TAG]-(t:Tag)-[:HAS_TAG]-(po2:Post)-[:POSTED]-(n) WHERE t.tagId = 'java' WITH CASE WHEN po.score > 38 AND po2.score > 38 THEN [po, po2] WHEN po.score > 38 THEN [po] WHEN po2.score > 38 THEN [po2] END AS result UNWIND result AS node RETURN DISTINCT node
Execution done
Node size is 1548
Edge size is 0
Took 946 ms to execute baseline query
Baseline returned 1548 nodes (or edges)
*********************************
baseline U4 MATCH p=(n:User)-[:POSTED]-(po:Post) WHERE po.score > 38 WITH COLLECT(po) AS firstPosts MATCH (n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 300 AND m.score < 450 WITH firstPosts, COLLECT(n) +  COLLECT(m) AS secondPosts WITH [x IN firstPosts WHERE x IN secondPosts] AS commonNodes UNWIND commonNodes AS commonNode RETURN DISTINCT commonNode
Executing query: MATCH p=(n:User)-[:POSTED]-(po:Post) WHERE po.score > 38 WITH COLLECT(po) AS firstPosts MATCH (n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 300 AND m.score < 450 WITH firstPosts, COLLECT(n) +  COLLECT(m) AS secondPosts WITH [x IN firstPosts WHERE x IN secondPosts] AS commonNodes UNWIND commonNodes AS commonNode RETURN DISTINCT commonNode
Execution done
Node size is 5539
Edge size is 0
Took 2902 ms to execute baseline query
Baseline returned 5539 nodes (or edges)
*********************************
baseline U5 MATCH (n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]-(worstPost:Post) WHERE worstPost.score < 10 AND betterPost.score > worstPost.score * 10 AND n.upvotes > 400 RETURN DISTINCT n
Executing query: MATCH (n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]-(worstPost:Post) WHERE worstPost.score < 10 AND betterPost.score > worstPost.score * 10 AND n.upvotes > 400 RETURN DISTINCT n
Execution done
Node size is 5096
Edge size is 0
Took 2691 ms to execute baseline query
Baseline returned 5096 nodes (or edges)
*********************************
baseline U1 MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User) WHERE n.userId<m.userId AND p1.score < p2.score WITH m MATCH p=(m)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]->(worstPost:Post) WHERE m.reputation < 850 AND worstPost.score < 10 AND betterPost.score > worstPost.score * 10 RETURN DISTINCT m
Executing query: MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User) WHERE n.userId<m.userId AND p1.score < p2.score WITH m MATCH p=(m)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]->(worstPost:Post) WHERE m.reputation < 850 AND worstPost.score < 10 AND betterPost.score > worstPost.score * 10 RETURN DISTINCT m
Execution done
Node size is 3990
Edge size is 0
Took 584 ms to execute baseline query
Baseline returned 3990 nodes (or edges)
*********************************
baseline U5 MATCH (n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]-(worstPost:Post) WHERE worstPost.score < 10 AND betterPost.score > worstPost.score * 10 AND n.upvotes > 400 RETURN DISTINCT n
Executing query: MATCH (n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]-(worstPost:Post) WHERE worstPost.score < 10 AND betterPost.score > worstPost.score * 10 AND n.upvotes > 400 RETURN DISTINCT n
Execution done
Node size is 5096
Edge size is 0
Took 2382 ms to execute baseline query
Baseline returned 5096 nodes (or edges)
*********************************
baseline U4 MATCH p=(n:User)-[:POSTED]-(po:Post) WHERE po.score > 38 WITH COLLECT(po) AS firstPosts MATCH (n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 300 AND m.score < 450 WITH firstPosts, COLLECT(n) +  COLLECT(m) AS secondPosts WITH [x IN firstPosts WHERE x IN secondPosts] AS commonNodes UNWIND commonNodes AS commonNode RETURN DISTINCT commonNode
Executing query: MATCH p=(n:User)-[:POSTED]-(po:Post) WHERE po.score > 38 WITH COLLECT(po) AS firstPosts MATCH (n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 300 AND m.score < 450 WITH firstPosts, COLLECT(n) +  COLLECT(m) AS secondPosts WITH [x IN firstPosts WHERE x IN secondPosts] AS commonNodes UNWIND commonNodes AS commonNode RETURN DISTINCT commonNode
Execution done
Node size is 5539
Edge size is 0
Took 2888 ms to execute baseline query
Baseline returned 5539 nodes (or edges)
*********************************
baseline U1 MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User) WHERE n.userId<m.userId AND p1.score < p2.score WITH m MATCH p=(m)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]->(worstPost:Post) WHERE m.reputation < 850 AND worstPost.score < 10 AND betterPost.score > worstPost.score * 10 RETURN DISTINCT m
Executing query: MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User) WHERE n.userId<m.userId AND p1.score < p2.score WITH m MATCH p=(m)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]->(worstPost:Post) WHERE m.reputation < 850 AND worstPost.score < 10 AND betterPost.score > worstPost.score * 10 RETURN DISTINCT m
Execution done
Node size is 3990
Edge size is 0
Took 554 ms to execute baseline query
Baseline returned 3990 nodes (or edges)
*********************************
baseline U3 MATCH p=(n:User)-[:POSTED]-(po:Post)-[:HAS_TAG]-(t:Tag)-[:HAS_TAG]-(po2:Post)-[:POSTED]-(n) WHERE t.tagId = 'java' WITH CASE WHEN po.score > 38 AND po2.score > 38 THEN [po, po2] WHEN po.score > 38 THEN [po] WHEN po2.score > 38 THEN [po2] END AS result UNWIND result AS node RETURN DISTINCT node
Executing query: MATCH p=(n:User)-[:POSTED]-(po:Post)-[:HAS_TAG]-(t:Tag)-[:HAS_TAG]-(po2:Post)-[:POSTED]-(n) WHERE t.tagId = 'java' WITH CASE WHEN po.score > 38 AND po2.score > 38 THEN [po, po2] WHEN po.score > 38 THEN [po] WHEN po2.score > 38 THEN [po2] END AS result UNWIND result AS node RETURN DISTINCT node
Execution done
Node size is 1548
Edge size is 0
Took 884 ms to execute baseline query
Baseline returned 1548 nodes (or edges)
*********************************
baseline U2 MATCH p=(n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 200 AND n.score > 200 AND n.score < 1500 RETURN DISTINCT n
Executing query: MATCH p=(n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 200 AND n.score > 200 AND n.score < 1500 RETURN DISTINCT n
Execution done
Node size is 16437
Edge size is 0
Took 1298 ms to execute baseline query
Baseline returned 16437 nodes (or edges)
*********************************
baseline U1 MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User) WHERE n.userId<m.userId AND p1.score < p2.score WITH m MATCH p=(m)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]->(worstPost:Post) WHERE m.reputation < 850 AND worstPost.score < 10 AND betterPost.score > worstPost.score * 10 RETURN DISTINCT m
Executing query: MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User) WHERE n.userId<m.userId AND p1.score < p2.score WITH m MATCH p=(m)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]->(worstPost:Post) WHERE m.reputation < 850 AND worstPost.score < 10 AND betterPost.score > worstPost.score * 10 RETURN DISTINCT m
Execution done
Node size is 3990
Edge size is 0
Took 549 ms to execute baseline query
Baseline returned 3990 nodes (or edges)
*********************************
baseline U5 MATCH (n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]-(worstPost:Post) WHERE worstPost.score < 10 AND betterPost.score > worstPost.score * 10 AND n.upvotes > 400 RETURN DISTINCT n
Executing query: MATCH (n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]-(worstPost:Post) WHERE worstPost.score < 10 AND betterPost.score > worstPost.score * 10 AND n.upvotes > 400 RETURN DISTINCT n
Execution done
Node size is 5096
Edge size is 0
Took 2502 ms to execute baseline query
Baseline returned 5096 nodes (or edges)
*********************************
baseline U3 MATCH p=(n:User)-[:POSTED]-(po:Post)-[:HAS_TAG]-(t:Tag)-[:HAS_TAG]-(po2:Post)-[:POSTED]-(n) WHERE t.tagId = 'java' WITH CASE WHEN po.score > 38 AND po2.score > 38 THEN [po, po2] WHEN po.score > 38 THEN [po] WHEN po2.score > 38 THEN [po2] END AS result UNWIND result AS node RETURN DISTINCT node
Executing query: MATCH p=(n:User)-[:POSTED]-(po:Post)-[:HAS_TAG]-(t:Tag)-[:HAS_TAG]-(po2:Post)-[:POSTED]-(n) WHERE t.tagId = 'java' WITH CASE WHEN po.score > 38 AND po2.score > 38 THEN [po, po2] WHEN po.score > 38 THEN [po] WHEN po2.score > 38 THEN [po2] END AS result UNWIND result AS node RETURN DISTINCT node
Execution done
Node size is 1548
Edge size is 0
Took 1016 ms to execute baseline query
Baseline returned 1548 nodes (or edges)
*********************************
baseline U2 MATCH p=(n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 200 AND n.score > 200 AND n.score < 1500 RETURN DISTINCT n
Executing query: MATCH p=(n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 200 AND n.score > 200 AND n.score < 1500 RETURN DISTINCT n
Execution done
Node size is 16437
Edge size is 0
Took 1300 ms to execute baseline query
Baseline returned 16437 nodes (or edges)
*********************************
baseline U4 MATCH p=(n:User)-[:POSTED]-(po:Post) WHERE po.score > 38 WITH COLLECT(po) AS firstPosts MATCH (n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 300 AND m.score < 450 WITH firstPosts, COLLECT(n) +  COLLECT(m) AS secondPosts WITH [x IN firstPosts WHERE x IN secondPosts] AS commonNodes UNWIND commonNodes AS commonNode RETURN DISTINCT commonNode
Executing query: MATCH p=(n:User)-[:POSTED]-(po:Post) WHERE po.score > 38 WITH COLLECT(po) AS firstPosts MATCH (n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 300 AND m.score < 450 WITH firstPosts, COLLECT(n) +  COLLECT(m) AS secondPosts WITH [x IN firstPosts WHERE x IN secondPosts] AS commonNodes UNWIND commonNodes AS commonNode RETURN DISTINCT commonNode
Execution done
Node size is 5539
Edge size is 0
Took 2875 ms to execute baseline query
Baseline returned 5539 nodes (or edges)
*********************************

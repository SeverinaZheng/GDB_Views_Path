baseline U5 MATCH (n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]-(worstPost:Post) WHERE worstPost.score < 10 AND betterPost.score > worstPost.score * 10 AND n.upvotes > 400 RETURN DISTINCT n
baseline U2 MATCH p=(n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 200 AND n.score > 200 AND n.score < 1500 RETURN DISTINCT n
baseline U1 MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User) WHERE n.userId<m.userId AND p1.score < p2.score WITH m MATCH p=(m)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]->(worstPost:Post) WHERE m.reputation < 850 AND worstPost.score < 10 AND betterPost.score > worstPost.score * 10 RETURN DISTINCT m
baseline U3 MATCH p=(n:User)-[:POSTED]-(po:Post)-[:HAS_TAG]-(t:Tag)-[:HAS_TAG]-(po2:Post)-[:POSTED]-(n) WHERE t.tagId = 'java' WITH CASE WHEN po.score > 38 AND po2.score > 38 THEN [po, po2] WHEN po.score > 38 THEN [po] WHEN po2.score > 38 THEN [po2] END AS result UNWIND result AS node RETURN DISTINCT node
baseline U4 MATCH p=(n:User)-[:POSTED]-(po:Post) WHERE po.score > 38 WITH COLLECT(po) AS firstPosts MATCH (n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 300 AND m.score < 450 WITH firstPosts, COLLECT(n) +  COLLECT(m) AS secondPosts WITH [x IN firstPosts WHERE x IN secondPosts] AS commonNodes UNWIND commonNodes AS commonNode RETURN DISTINCT commonNode
baseline U1 MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User) WHERE n.userId<m.userId AND p1.score < p2.score WITH m MATCH p=(m)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]->(worstPost:Post) WHERE m.reputation < 850 AND worstPost.score < 10 AND betterPost.score > worstPost.score * 10 RETURN DISTINCT m
baseline U5 MATCH (n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]-(worstPost:Post) WHERE worstPost.score < 10 AND betterPost.score > worstPost.score * 10 AND n.upvotes > 400 RETURN DISTINCT n
baseline U3 MATCH p=(n:User)-[:POSTED]-(po:Post)-[:HAS_TAG]-(t:Tag)-[:HAS_TAG]-(po2:Post)-[:POSTED]-(n) WHERE t.tagId = 'java' WITH CASE WHEN po.score > 38 AND po2.score > 38 THEN [po, po2] WHEN po.score > 38 THEN [po] WHEN po2.score > 38 THEN [po2] END AS result UNWIND result AS node RETURN DISTINCT node
baseline U2 MATCH p=(n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 200 AND n.score > 200 AND n.score < 1500 RETURN DISTINCT n
baseline U4 MATCH p=(n:User)-[:POSTED]-(po:Post) WHERE po.score > 38 WITH COLLECT(po) AS firstPosts MATCH (n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 300 AND m.score < 450 WITH firstPosts, COLLECT(n) +  COLLECT(m) AS secondPosts WITH [x IN firstPosts WHERE x IN secondPosts] AS commonNodes UNWIND commonNodes AS commonNode RETURN DISTINCT commonNode
baseline U2 MATCH p=(n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 200 AND n.score > 200 AND n.score < 1500 RETURN DISTINCT n
baseline U3 MATCH p=(n:User)-[:POSTED]-(po:Post)-[:HAS_TAG]-(t:Tag)-[:HAS_TAG]-(po2:Post)-[:POSTED]-(n) WHERE t.tagId = 'java' WITH CASE WHEN po.score > 38 AND po2.score > 38 THEN [po, po2] WHEN po.score > 38 THEN [po] WHEN po2.score > 38 THEN [po2] END AS result UNWIND result AS node RETURN DISTINCT node
baseline U4 MATCH p=(n:User)-[:POSTED]-(po:Post) WHERE po.score > 38 WITH COLLECT(po) AS firstPosts MATCH (n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 300 AND m.score < 450 WITH firstPosts, COLLECT(n) +  COLLECT(m) AS secondPosts WITH [x IN firstPosts WHERE x IN secondPosts] AS commonNodes UNWIND commonNodes AS commonNode RETURN DISTINCT commonNode
baseline U5 MATCH (n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]-(worstPost:Post) WHERE worstPost.score < 10 AND betterPost.score > worstPost.score * 10 AND n.upvotes > 400 RETURN DISTINCT n
baseline U1 MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User) WHERE n.userId<m.userId AND p1.score < p2.score WITH m MATCH p=(m)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]->(worstPost:Post) WHERE m.reputation < 850 AND worstPost.score < 10 AND betterPost.score > worstPost.score * 10 RETURN DISTINCT m
baseline U5 MATCH (n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]-(worstPost:Post) WHERE worstPost.score < 10 AND betterPost.score > worstPost.score * 10 AND n.upvotes > 400 RETURN DISTINCT n
baseline U4 MATCH p=(n:User)-[:POSTED]-(po:Post) WHERE po.score > 38 WITH COLLECT(po) AS firstPosts MATCH (n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 300 AND m.score < 450 WITH firstPosts, COLLECT(n) +  COLLECT(m) AS secondPosts WITH [x IN firstPosts WHERE x IN secondPosts] AS commonNodes UNWIND commonNodes AS commonNode RETURN DISTINCT commonNode
baseline U1 MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User) WHERE n.userId<m.userId AND p1.score < p2.score WITH m MATCH p=(m)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]->(worstPost:Post) WHERE m.reputation < 850 AND worstPost.score < 10 AND betterPost.score > worstPost.score * 10 RETURN DISTINCT m
baseline U3 MATCH p=(n:User)-[:POSTED]-(po:Post)-[:HAS_TAG]-(t:Tag)-[:HAS_TAG]-(po2:Post)-[:POSTED]-(n) WHERE t.tagId = 'java' WITH CASE WHEN po.score > 38 AND po2.score > 38 THEN [po, po2] WHEN po.score > 38 THEN [po] WHEN po2.score > 38 THEN [po2] END AS result UNWIND result AS node RETURN DISTINCT node
baseline U2 MATCH p=(n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 200 AND n.score > 200 AND n.score < 1500 RETURN DISTINCT n
baseline U1 MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User) WHERE n.userId<m.userId AND p1.score < p2.score WITH m MATCH p=(m)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]->(worstPost:Post) WHERE m.reputation < 850 AND worstPost.score < 10 AND betterPost.score > worstPost.score * 10 RETURN DISTINCT m
baseline U5 MATCH (n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]-(worstPost:Post) WHERE worstPost.score < 10 AND betterPost.score > worstPost.score * 10 AND n.upvotes > 400 RETURN DISTINCT n
baseline U3 MATCH p=(n:User)-[:POSTED]-(po:Post)-[:HAS_TAG]-(t:Tag)-[:HAS_TAG]-(po2:Post)-[:POSTED]-(n) WHERE t.tagId = 'java' WITH CASE WHEN po.score > 38 AND po2.score > 38 THEN [po, po2] WHEN po.score > 38 THEN [po] WHEN po2.score > 38 THEN [po2] END AS result UNWIND result AS node RETURN DISTINCT node
baseline U2 MATCH p=(n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 200 AND n.score > 200 AND n.score < 1500 RETURN DISTINCT n
baseline U4 MATCH p=(n:User)-[:POSTED]-(po:Post) WHERE po.score > 38 WITH COLLECT(po) AS firstPosts MATCH (n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 300 AND m.score < 450 WITH firstPosts, COLLECT(n) +  COLLECT(m) AS secondPosts WITH [x IN firstPosts WHERE x IN secondPosts] AS commonNodes UNWIND commonNodes AS commonNode RETURN DISTINCT commonNode

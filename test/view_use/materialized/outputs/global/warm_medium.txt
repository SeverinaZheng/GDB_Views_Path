CREATE VIEW AS V1_1 MATCH (n: User) WHERE n.upvotes > 1000 RETURN n
In enterRoot ctx is CREATE VIEW ASV1_1MATCH(n:User)WHEREn.upvotes>1000RETURNn
ViewSql is CREATE VIEW AS V1_1 MATCH (n: User) WHERE n.upvotes > 1000 RETURN n
VarLables of the input is {n=User}
Return Type is NODE
 MATCH (n: User) WHERE n.upvotes > 1000 SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V1_1" IN n.views THEN [] ELSE ["V1_1"] END) + n.views
Execution done
There are 5139 nodes
Took 1655ms to create views
*********************************
CREATE VIEW AS V1_2 MATCH (n: User) WHERE n.upvotes > 400 RETURN n
In enterRoot ctx is CREATE VIEW ASV1_2MATCH(n:User)WHEREn.upvotes>400RETURNn
ViewSql is CREATE VIEW AS V1_2 MATCH (n: User) WHERE n.upvotes > 400 RETURN n
VarLables of the input is {n=User}
Return Type is NODE
 MATCH (n: User) WHERE n.upvotes > 400 SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V1_2" IN n.views THEN [] ELSE ["V1_2"] END) + n.views
Execution done
There are 12036 nodes
Took 175ms to create views
*********************************
CREATE VIEW AS V2_1 MATCH (n:Post) WHERE n.score < 1500 AND n.score > 20 RETURN n
In enterRoot ctx is CREATE VIEW ASV2_1MATCH(n:Post)WHEREn.score<1500ANDn.score>20RETURNn
ViewSql is CREATE VIEW AS V2_1 MATCH (n:Post) WHERE n.score < 1500 AND n.score > 20 RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.score < 1500 AND n.score > 20 SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V2_1" IN n.views THEN [] ELSE ["V2_1"] END) + n.views
Execution done
There are 367709 nodes
Took 12396ms to create views
*********************************
CREATE VIEW AS V2_2 MATCH (n:Post) WHERE n.score < 1500 AND n.score > 10 RETURN n
In enterRoot ctx is CREATE VIEW ASV2_2MATCH(n:Post)WHEREn.score<1500ANDn.score>10RETURNn
ViewSql is CREATE VIEW AS V2_2 MATCH (n:Post) WHERE n.score < 1500 AND n.score > 10 RETURN n
VarLables of the input is {n=Post}
Return Type is NODE
 MATCH (n:Post) WHERE n.score < 1500 AND n.score > 10 SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V2_2" IN n.views THEN [] ELSE ["V2_2"] END) + n.views
Execution done
There are 718883 nodes
Took 3860ms to create views
*********************************
CREATE VIEW AS V3_1 MATCH p=(n:User)-[:POSTED]-(po:Post) WHERE n.reputation < 850 RETURN po
In enterRoot ctx is CREATE VIEW ASV3_1MATCHp=(n:User)-[:POSTED]-(po:Post)WHEREn.reputation<850RETURNpo
ViewSql is CREATE VIEW AS V3_1 MATCH p=(n:User)-[:POSTED]-(po:Post) WHERE n.reputation < 850 RETURN po
VarLables of the input is {_ENTRY_SPECIAL_NO_REL_NAME_1=POSTED, n=User, po=Post}
Return Type is NODE
 MATCH p=(n:User)-[:POSTED]-(po:Post) WHERE n.reputation < 850 SET(CASE WHEN NOT EXISTS(po.views) THEN po END).views = [] SET po.views = (CASE WHEN "V3_1" IN po.views THEN [] ELSE ["V3_1"] END) + po.views
Execution done
There are 253189 nodes
Took 679ms to create views
*********************************
CREATE VIEW AS V3_2 MATCH p = (n:User)-[:POSTED]-(po:Post) WHERE po.score > 38 RETURN po
In enterRoot ctx is CREATE VIEW ASV3_2MATCHp=(n:User)-[:POSTED]-(po:Post)WHEREpo.score>38RETURNpo
ViewSql is CREATE VIEW AS V3_2 MATCH p = (n:User)-[:POSTED]-(po:Post) WHERE po.score > 38 RETURN po
VarLables of the input is {_ENTRY_SPECIAL_NO_REL_NAME_2=POSTED, n=User, po=Post}
Return Type is NODE
 MATCH p = (n:User)-[:POSTED]-(po:Post) WHERE po.score > 38 SET(CASE WHEN NOT EXISTS(po.views) THEN po END).views = [] SET po.views = (CASE WHEN "V3_2" IN po.views THEN [] ELSE ["V3_2"] END) + po.views
Execution done
There are 111876 nodes
Took 3741ms to create views
*********************************
CREATE VIEW AS V4_1 MATCH p=(n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 200 AND n.score > 200 RETURN n
In enterRoot ctx is CREATE VIEW ASV4_1MATCHp=(n:Post)-[:PARENT_OF]-(m:Post)WHEREm.score>200ANDn.score>200RETURNn
ViewSql is CREATE VIEW AS V4_1 MATCH p=(n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 200 AND n.score > 200 RETURN n
VarLables of the input is {_ENTRY_SPECIAL_NO_REL_NAME_3=PARENT_OF, m=Post, n=Post}
Return Type is NODE
 MATCH p=(n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 200 AND n.score > 200 SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V4_1" IN n.views THEN [] ELSE ["V4_1"] END) + n.views
Execution done
There are 21463 nodes
Took 2103ms to create views
*********************************
CREATE VIEW AS V4_2 MATCH p=(n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 300 AND m.score < 450 RETURN m
In enterRoot ctx is CREATE VIEW ASV4_2MATCHp=(n:Post)-[:PARENT_OF]-(m:Post)WHEREm.score>300ANDm.score<450RETURNm
ViewSql is CREATE VIEW AS V4_2 MATCH p=(n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 300 AND m.score < 450 RETURN m
VarLables of the input is {_ENTRY_SPECIAL_NO_REL_NAME_4=PARENT_OF, m=Post, n=Post}
Return Type is NODE
 MATCH p=(n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 300 AND m.score < 450 SET(CASE WHEN NOT EXISTS(m.views) THEN m END).views = [] SET m.views = (CASE WHEN "V4_2" IN m.views THEN [] ELSE ["V4_2"] END) + m.views
Execution done
There are 7367 nodes
Took 2814ms to create views
*********************************
CREATE VIEW AS V5 MATCH (betterPost:Post)-[:PARENT_OF]-(worstPost:Post) WHERE worstPost.score < 10 AND betterPost.score > worstPost.score * 10 RETURN betterPost
In enterRoot ctx is CREATE VIEW ASV5MATCH(betterPost:Post)-[:PARENT_OF]-(worstPost:Post)WHEREworstPost.score<10ANDbetterPost.score>worstPost.score*10RETURNbetterPost
ViewSql is CREATE VIEW AS V5 MATCH (betterPost:Post)-[:PARENT_OF]-(worstPost:Post) WHERE worstPost.score < 10 AND betterPost.score > worstPost.score * 10 RETURN betterPost
ckqptPost, score
Post, score
VarLables of the input is {worstPost=Post, _ENTRY_SPECIAL_NO_REL_NAME_5=PARENT_OF, betterPost=Post}
Return Type is NODE
 MATCH (betterPost:Post)-[:PARENT_OF]-(worstPost:Post) WHERE worstPost.score < 10 AND betterPost.score > worstPost.score * 10 SET(CASE WHEN NOT EXISTS(betterPost.views) THEN betterPost END).views = [] SET betterPost.views = (CASE WHEN "V5" IN betterPost.views THEN [] ELSE ["V5"] END) + betterPost.views
Execution done
There are 1719664 nodes
Took 14899ms to create views
*********************************
CREATE VIEW AS V6_1 MATCH (n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]-(worstPost:Post) WHERE worstPost.score < 10 AND betterPost.score > worstPost.score * 10 RETURN n
In enterRoot ctx is CREATE VIEW ASV6_1MATCH(n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]-(worstPost:Post)WHEREworstPost.score<10ANDbetterPost.score>worstPost.score*10RETURNn
ViewSql is CREATE VIEW AS V6_1 MATCH (n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]-(worstPost:Post) WHERE worstPost.score < 10 AND betterPost.score > worstPost.score * 10 RETURN n
ckqptPost, score
Post, score
VarLables of the input is {worstPost=Post, n=User, _ENTRY_SPECIAL_NO_REL_NAME_6=POSTED, betterPost=Post, _ENTRY_SPECIAL_NO_REL_NAME_7=PARENT_OF}
Return Type is NODE
 MATCH (n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]-(worstPost:Post) WHERE worstPost.score < 10 AND betterPost.score > worstPost.score * 10 SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V6_1" IN n.views THEN [] ELSE ["V6_1"] END) + n.views
Execution done
There are 59909 nodes
Took 12201ms to create views
*********************************
CREATE VIEW AS V6_2 MATCH (n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]-(worstPost:Post) WHERE n.reputation < 850 AND worstPost.score < 10 AND betterPost.score > worstPost.score * 10 RETURN n
In enterRoot ctx is CREATE VIEW ASV6_2MATCH(n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]-(worstPost:Post)WHEREn.reputation<850ANDworstPost.score<10ANDbetterPost.score>worstPost.score*10RETURNn
ViewSql is CREATE VIEW AS V6_2 MATCH (n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]-(worstPost:Post) WHERE n.reputation < 850 AND worstPost.score < 10 AND betterPost.score > worstPost.score * 10 RETURN n
ckqptPost, score
Post, score
VarLables of the input is {worstPost=Post, _ENTRY_SPECIAL_NO_REL_NAME_8=POSTED, _ENTRY_SPECIAL_NO_REL_NAME_9=PARENT_OF, n=User, betterPost=Post}
Return Type is NODE
 MATCH (n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]-(worstPost:Post) WHERE n.reputation < 850 AND worstPost.score < 10 AND betterPost.score > worstPost.score * 10 SET(CASE WHEN NOT EXISTS(n.views) THEN n END).views = [] SET n.views = (CASE WHEN "V6_2" IN n.views THEN [] ELSE ["V6_2"] END) + n.views
Execution done
There are 25959 nodes
Took 1105ms to create views
*********************************
CREATE VIEW AS V7_1 MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User) WHERE n.userId<m.userId AND n.reputation>m.reputation RETURN m
In enterRoot ctx is CREATE VIEW ASV7_1MATCH(n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User)WHEREn.userId<m.userIdANDn.reputation>m.reputationRETURNm
ViewSql is CREATE VIEW AS V7_1 MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User) WHERE n.userId<m.userId AND n.reputation>m.reputation RETURN m
ckqptUser, userId
User, userId
ckqptUser, reputation
User, reputation
VarLables of the input is {p1=Post, p2=Post, _ENTRY_SPECIAL_NO_REL_NAME_10=POSTED, _ENTRY_SPECIAL_NO_REL_NAME_11=PARENT_OF, m=User, n=User}
Return Type is NODE
 MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User) WHERE n.userId<m.userId AND n.reputation>m.reputation SET(CASE WHEN NOT EXISTS(m.views) THEN m END).views = [] SET m.views = (CASE WHEN "V7_1" IN m.views THEN [] ELSE ["V7_1"] END) + m.views
Execution done
There are 77209 nodes
Took 14307ms to create views
*********************************
CREATE VIEW AS V7_2 MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User) WHERE n.userId<m.userId AND p1.score < p2.score RETURN m
In enterRoot ctx is CREATE VIEW ASV7_2MATCH(n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User)WHEREn.userId<m.userIdANDp1.score<p2.scoreRETURNm
ViewSql is CREATE VIEW AS V7_2 MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User) WHERE n.userId<m.userId AND p1.score < p2.score RETURN m
ckqptUser, userId
User, userId
ckqptPost, score
Post, score
VarLables of the input is {p1=Post, p2=Post, _ENTRY_SPECIAL_NO_REL_NAME_14=PARENT_OF, _ENTRY_SPECIAL_NO_REL_NAME_13=POSTED, m=User, n=User}
Return Type is NODE
 MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User) WHERE n.userId<m.userId AND p1.score < p2.score SET(CASE WHEN NOT EXISTS(m.views) THEN m END).views = [] SET m.views = (CASE WHEN "V7_2" IN m.views THEN [] ELSE ["V7_2"] END) + m.views
Execution done
There are 57905 nodes
Took 14748ms to create views
*********************************
CREATE VIEW AS V8_1 MATCH p=(n:User)-[:POSTED]-(po:Post) WHERE n.reputation < 850 RETURN p
In enterRoot ctx is CREATE VIEW ASV8_1MATCHp=(n:User)-[:POSTED]-(po:Post)WHEREn.reputation<850RETURNp
ViewSql is CREATE VIEW AS V8_1 MATCH p=(n:User)-[:POSTED]-(po:Post) WHERE n.reputation < 850 RETURN p
VarLables of the input is {n=User, _ENTRY_SPECIAL_NO_REL_NAME_16=POSTED, po=Post}
Return Type is PATH
 MATCH p=(n:User)-[:POSTED]-(po:Post) WHERE n.reputation < 850 FOREACH(pathnode in nodes(p) | SET(CASE WHEN NOT EXISTS(pathnode.views) THEN pathnode END).views = [] SET pathnode.views = (CASE WHEN "V8_1" IN pathnode.views THEN [] ELSE ["V8_1"] END) + pathnode.views)
FOREACH(pathnode in relationships(p) | SET(CASE WHEN NOT EXISTS(pathnode.views) THEN pathnode END).views = [] SET pathnode.views = (CASE WHEN "V8_1" IN pathnode.views THEN [] ELSE ["V8_1"] END) + pathnode.views)
Executing query:  MATCH p=(n:User)-[:POSTED]-(po:Post) WHERE n.reputation < 850 RETURN p
Return set contains 253189
There are 301332 nodes
Took 1075ms to create views
*********************************
CREATE VIEW AS V8_2 MATCH p=(n:User)-[:POSTED]-(po:Post) WHERE po.score > 38 RETURN p
In enterRoot ctx is CREATE VIEW ASV8_2MATCHp=(n:User)-[:POSTED]-(po:Post)WHEREpo.score>38RETURNp
ViewSql is CREATE VIEW AS V8_2 MATCH p=(n:User)-[:POSTED]-(po:Post) WHERE po.score > 38 RETURN p
VarLables of the input is {_ENTRY_SPECIAL_NO_REL_NAME_17=POSTED, n=User, po=Post}
Return Type is PATH
 MATCH p=(n:User)-[:POSTED]-(po:Post) WHERE po.score > 38 FOREACH(pathnode in nodes(p) | SET(CASE WHEN NOT EXISTS(pathnode.views) THEN pathnode END).views = [] SET pathnode.views = (CASE WHEN "V8_2" IN pathnode.views THEN [] ELSE ["V8_2"] END) + pathnode.views)
FOREACH(pathnode in relationships(p) | SET(CASE WHEN NOT EXISTS(pathnode.views) THEN pathnode END).views = [] SET pathnode.views = (CASE WHEN "V8_2" IN pathnode.views THEN [] ELSE ["V8_2"] END) + pathnode.views)
Executing query:  MATCH p=(n:User)-[:POSTED]-(po:Post) WHERE po.score > 38 RETURN p
Return set contains 111876
There are 138116 nodes
Took 3755ms to create views
*********************************
CREATE VIEW AS V9_1 MATCH p=(n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 200 AND n.score > 200 RETURN p
In enterRoot ctx is CREATE VIEW ASV9_1MATCHp=(n:Post)-[:PARENT_OF]-(m:Post)WHEREm.score>200ANDn.score>200RETURNp
ViewSql is CREATE VIEW AS V9_1 MATCH p=(n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 200 AND n.score > 200 RETURN p
VarLables of the input is {_ENTRY_SPECIAL_NO_REL_NAME_18=PARENT_OF, m=Post, n=Post}
Return Type is PATH
 MATCH p=(n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 200 AND n.score > 200 FOREACH(pathnode in nodes(p) | SET(CASE WHEN NOT EXISTS(pathnode.views) THEN pathnode END).views = [] SET pathnode.views = (CASE WHEN "V9_1" IN pathnode.views THEN [] ELSE ["V9_1"] END) + pathnode.views)
FOREACH(pathnode in relationships(p) | SET(CASE WHEN NOT EXISTS(pathnode.views) THEN pathnode END).views = [] SET pathnode.views = (CASE WHEN "V9_1" IN pathnode.views THEN [] ELSE ["V9_1"] END) + pathnode.views)
Executing query:  MATCH p=(n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 200 AND n.score > 200 RETURN p
Return set contains 12094
There are 21463 nodes
Took 2060ms to create views
*********************************
CREATE VIEW AS V9_2 MATCH p=(n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 300 AND m.score < 450 RETURN p
In enterRoot ctx is CREATE VIEW ASV9_2MATCHp=(n:Post)-[:PARENT_OF]-(m:Post)WHEREm.score>300ANDm.score<450RETURNp
ViewSql is CREATE VIEW AS V9_2 MATCH p=(n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 300 AND m.score < 450 RETURN p
VarLables of the input is {_ENTRY_SPECIAL_NO_REL_NAME_19=PARENT_OF, m=Post, n=Post}
Return Type is PATH
 MATCH p=(n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 300 AND m.score < 450 FOREACH(pathnode in nodes(p) | SET(CASE WHEN NOT EXISTS(pathnode.views) THEN pathnode END).views = [] SET pathnode.views = (CASE WHEN "V9_2" IN pathnode.views THEN [] ELSE ["V9_2"] END) + pathnode.views)
FOREACH(pathnode in relationships(p) | SET(CASE WHEN NOT EXISTS(pathnode.views) THEN pathnode END).views = [] SET pathnode.views = (CASE WHEN "V9_2" IN pathnode.views THEN [] ELSE ["V9_2"] END) + pathnode.views)
Executing query:  MATCH p=(n:Post)-[:PARENT_OF]-(m:Post) WHERE m.score > 300 AND m.score < 450 RETURN p
Return set contains 20003
There are 26418 nodes
Took 2670ms to create views
*********************************
CREATE VIEW AS V10 MATCH p=(betterPost:Post)-[:PARENT_OF]-(worstPost:Post) WHERE worstPost.score < 10 AND betterPost.score > worstPost.score * 10 RETURN p
In enterRoot ctx is CREATE VIEW ASV10MATCHp=(betterPost:Post)-[:PARENT_OF]-(worstPost:Post)WHEREworstPost.score<10ANDbetterPost.score>worstPost.score*10RETURNp
ViewSql is CREATE VIEW AS V10 MATCH p=(betterPost:Post)-[:PARENT_OF]-(worstPost:Post) WHERE worstPost.score < 10 AND betterPost.score > worstPost.score * 10 RETURN p
ckqptPost, score
Post, score
VarLables of the input is {worstPost=Post, _ENTRY_SPECIAL_NO_REL_NAME_20=PARENT_OF, betterPost=Post}
Return Type is PATH
 MATCH p=(betterPost:Post)-[:PARENT_OF]-(worstPost:Post) WHERE worstPost.score < 10 AND betterPost.score > worstPost.score * 10 FOREACH(pathnode in nodes(p) | SET(CASE WHEN NOT EXISTS(pathnode.views) THEN pathnode END).views = [] SET pathnode.views = (CASE WHEN "V10" IN pathnode.views THEN [] ELSE ["V10"] END) + pathnode.views)
FOREACH(pathnode in relationships(p) | SET(CASE WHEN NOT EXISTS(pathnode.views) THEN pathnode END).views = [] SET pathnode.views = (CASE WHEN "V10" IN pathnode.views THEN [] ELSE ["V10"] END) + pathnode.views)
Executing query:  MATCH p=(betterPost:Post)-[:PARENT_OF]-(worstPost:Post) WHERE worstPost.score < 10 AND betterPost.score > worstPost.score * 10 RETURN p
Return set contains 2207384
There are 3624699 nodes
Took 18097ms to create views
*********************************
CREATE VIEW AS V11_1 MATCH p=(n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]->(worstPost:Post) WHERE worstPost.score < 10 AND betterPost.score > worstPost.score * 10 RETURN p
In enterRoot ctx is CREATE VIEW ASV11_1MATCHp=(n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]->(worstPost:Post)WHEREworstPost.score<10ANDbetterPost.score>worstPost.score*10RETURNp
ViewSql is CREATE VIEW AS V11_1 MATCH p=(n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]->(worstPost:Post) WHERE worstPost.score < 10 AND betterPost.score > worstPost.score * 10 RETURN p
ckqptPost, score
Post, score
VarLables of the input is {worstPost=Post, _ENTRY_SPECIAL_NO_REL_NAME_21=POSTED, _ENTRY_SPECIAL_NO_REL_NAME_22=PARENT_OF, n=User, betterPost=Post}
Return Type is PATH
 MATCH p=(n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]->(worstPost:Post) WHERE worstPost.score < 10 AND betterPost.score > worstPost.score * 10 FOREACH(pathnode in nodes(p) | SET(CASE WHEN NOT EXISTS(pathnode.views) THEN pathnode END).views = [] SET pathnode.views = (CASE WHEN "V11_1" IN pathnode.views THEN [] ELSE ["V11_1"] END) + pathnode.views)
FOREACH(pathnode in relationships(p) | SET(CASE WHEN NOT EXISTS(pathnode.views) THEN pathnode END).views = [] SET pathnode.views = (CASE WHEN "V11_1" IN pathnode.views THEN [] ELSE ["V11_1"] END) + pathnode.views)
Executing query:  MATCH p=(n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]->(worstPost:Post) WHERE worstPost.score < 10 AND betterPost.score > worstPost.score * 10 RETURN p
Return set contains 824709
There are 874164 nodes
Took 11453ms to create views
*********************************
CREATE VIEW AS V11_2 MATCH p=(n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]->(worstPost:Post) WHERE n.reputation < 850 AND worstPost.score < 10 AND betterPost.score > worstPost.score * 10 RETURN p
In enterRoot ctx is CREATE VIEW ASV11_2MATCHp=(n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]->(worstPost:Post)WHEREn.reputation<850ANDworstPost.score<10ANDbetterPost.score>worstPost.score*10RETURNp
ViewSql is CREATE VIEW AS V11_2 MATCH p=(n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]->(worstPost:Post) WHERE n.reputation < 850 AND worstPost.score < 10 AND betterPost.score > worstPost.score * 10 RETURN p
ckqptPost, score
Post, score
VarLables of the input is {worstPost=Post, _ENTRY_SPECIAL_NO_REL_NAME_23=POSTED, _ENTRY_SPECIAL_NO_REL_NAME_24=PARENT_OF, n=User, betterPost=Post}
Return Type is PATH
 MATCH p=(n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]->(worstPost:Post) WHERE n.reputation < 850 AND worstPost.score < 10 AND betterPost.score > worstPost.score * 10 FOREACH(pathnode in nodes(p) | SET(CASE WHEN NOT EXISTS(pathnode.views) THEN pathnode END).views = [] SET pathnode.views = (CASE WHEN "V11_2" IN pathnode.views THEN [] ELSE ["V11_2"] END) + pathnode.views)
FOREACH(pathnode in relationships(p) | SET(CASE WHEN NOT EXISTS(pathnode.views) THEN pathnode END).views = [] SET pathnode.views = (CASE WHEN "V11_2" IN pathnode.views THEN [] ELSE ["V11_2"] END) + pathnode.views)
Executing query:  MATCH p=(n:User)-[:POSTED]-(betterPost:Post)-[:PARENT_OF]->(worstPost:Post) WHERE n.reputation < 850 AND worstPost.score < 10 AND betterPost.score > worstPost.score * 10 RETURN p
Return set contains 103050
There are 123738 nodes
Took 1190ms to create views
*********************************
CREATE VIEW AS V12_1 MATCH p=(n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User) WHERE n.userId<m.userId AND n.reputation>m.reputation RETURN p
In enterRoot ctx is CREATE VIEW ASV12_1MATCHp=(n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User)WHEREn.userId<m.userIdANDn.reputation>m.reputationRETURNp
ViewSql is CREATE VIEW AS V12_1 MATCH p=(n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User) WHERE n.userId<m.userId AND n.reputation>m.reputation RETURN p
ckqptUser, userId
User, userId
ckqptUser, reputation
User, reputation
VarLables of the input is {p1=Post, p2=Post, _ENTRY_SPECIAL_NO_REL_NAME_25=POSTED, m=User, n=User, _ENTRY_SPECIAL_NO_REL_NAME_26=PARENT_OF}
Return Type is PATH
 MATCH p=(n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User) WHERE n.userId<m.userId AND n.reputation>m.reputation FOREACH(pathnode in nodes(p) | SET(CASE WHEN NOT EXISTS(pathnode.views) THEN pathnode END).views = [] SET pathnode.views = (CASE WHEN "V12_1" IN pathnode.views THEN [] ELSE ["V12_1"] END) + pathnode.views)
FOREACH(pathnode in relationships(p) | SET(CASE WHEN NOT EXISTS(pathnode.views) THEN pathnode END).views = [] SET pathnode.views = (CASE WHEN "V12_1" IN pathnode.views THEN [] ELSE ["V12_1"] END) + pathnode.views)
Executing query:  MATCH p=(n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User) WHERE n.userId<m.userId AND n.reputation>m.reputation RETURN p
Return set contains 2274209
There are 1460732 nodes
Took 25174ms to create views
*********************************
CREATE VIEW AS V12_2 MATCH p=(n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User) WHERE n.userId<m.userId AND p1.score < p2.score RETURN p
In enterRoot ctx is CREATE VIEW ASV12_2MATCHp=(n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User)WHEREn.userId<m.userIdANDp1.score<p2.scoreRETURNp
ViewSql is CREATE VIEW AS V12_2 MATCH p=(n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User) WHERE n.userId<m.userId AND p1.score < p2.score RETURN p
ckqptUser, userId
User, userId
ckqptPost, score
Post, score
VarLables of the input is {_ENTRY_SPECIAL_NO_REL_NAME_29=PARENT_OF, _ENTRY_SPECIAL_NO_REL_NAME_28=POSTED, p1=Post, p2=Post, m=User, n=User}
Return Type is PATH
 MATCH p=(n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User) WHERE n.userId<m.userId AND p1.score < p2.score FOREACH(pathnode in nodes(p) | SET(CASE WHEN NOT EXISTS(pathnode.views) THEN pathnode END).views = [] SET pathnode.views = (CASE WHEN "V12_2" IN pathnode.views THEN [] ELSE ["V12_2"] END) + pathnode.views)
FOREACH(pathnode in relationships(p) | SET(CASE WHEN NOT EXISTS(pathnode.views) THEN pathnode END).views = [] SET pathnode.views = (CASE WHEN "V12_2" IN pathnode.views THEN [] ELSE ["V12_2"] END) + pathnode.views)
Executing query:  MATCH p=(n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)-[:POSTED]-(m:User) WHERE n.userId<m.userId AND p1.score < p2.score RETURN p
Return set contains 1544095
There are 1014730 nodes
Took 20850ms to create views
*********************************
CREATE VIEW AS V14_1 MATCH p=(n:User)-[:POSTED]-(po:Post)-[:HAS_TAG]-(t:Tag)-[:HAS_TAG]-(po2:Post)-[:POSTED]-(n) WHERE t.tagId = 'java' RETURN p
In enterRoot ctx is CREATE VIEW ASV14_1MATCHp=(n:User)-[:POSTED]-(po:Post)-[:HAS_TAG]-(t:Tag)-[:HAS_TAG]-(po2:Post)-[:POSTED]-(n)WHEREt.tagId='java'RETURNp
ViewSql is CREATE VIEW AS V14_1 MATCH p=(n:User)-[:POSTED]-(po:Post)-[:HAS_TAG]-(t:Tag)-[:HAS_TAG]-(po2:Post)-[:POSTED]-(n) WHERE t.tagId = 'java' RETURN p
VarLables of the input is {po2=Post, t=Tag, _ENTRY_SPECIAL_NO_REL_NAME_32=HAS_TAG, _ENTRY_SPECIAL_NO_REL_NAME_31=POSTED, n=_ENTRY_SPECIAL_NODE_STAR_, po=Post}
Return Type is PATH
 MATCH p=(n:User)-[:POSTED]-(po:Post)-[:HAS_TAG]-(t:Tag)-[:HAS_TAG]-(po2:Post)-[:POSTED]-(n) WHERE t.tagId = 'java' FOREACH(pathnode in nodes(p) | SET(CASE WHEN NOT EXISTS(pathnode.views) THEN pathnode END).views = [] SET pathnode.views = (CASE WHEN "V14_1" IN pathnode.views THEN [] ELSE ["V14_1"] END) + pathnode.views)
FOREACH(pathnode in relationships(p) | SET(CASE WHEN NOT EXISTS(pathnode.views) THEN pathnode END).views = [] SET pathnode.views = (CASE WHEN "V14_1" IN pathnode.views THEN [] ELSE ["V14_1"] END) + pathnode.views)
Executing query:  MATCH p=(n:User)-[:POSTED]-(po:Post)-[:HAS_TAG]-(t:Tag)-[:HAS_TAG]-(po2:Post)-[:POSTED]-(n) WHERE t.tagId = 'java' RETURN p
Return set contains 110960
There are 62687 nodes
Took 9942ms to create views
*********************************
CREATE VIEW AS V14_2 MATCH p=(n:User)-[:POSTED]-(po:Post)-[:HAS_TAG]-(t:Tag)-[:HAS_TAG]-(po2:Post)-[:POSTED]-(n) WHERE t.tagId = 'java' OR t.tagId = 'c#' RETURN p
In enterRoot ctx is CREATE VIEW ASV14_2MATCHp=(n:User)-[:POSTED]-(po:Post)-[:HAS_TAG]-(t:Tag)-[:HAS_TAG]-(po2:Post)-[:POSTED]-(n)WHEREt.tagId='java'ORt.tagId='c#'RETURNp
ViewSql is CREATE VIEW AS V14_2 MATCH p=(n:User)-[:POSTED]-(po:Post)-[:HAS_TAG]-(t:Tag)-[:HAS_TAG]-(po2:Post)-[:POSTED]-(n) WHERE t.tagId = 'java' OR t.tagId = 'c#' RETURN p
VarLables of the input is {po2=Post, t=Tag, _ENTRY_SPECIAL_NO_REL_NAME_36=HAS_TAG, _ENTRY_SPECIAL_NO_REL_NAME_35=POSTED, n=_ENTRY_SPECIAL_NODE_STAR_, po=Post}
Return Type is PATH
 MATCH p=(n:User)-[:POSTED]-(po:Post)-[:HAS_TAG]-(t:Tag)-[:HAS_TAG]-(po2:Post)-[:POSTED]-(n) WHERE t.tagId = 'java' OR t.tagId = 'c#' FOREACH(pathnode in nodes(p) | SET(CASE WHEN NOT EXISTS(pathnode.views) THEN pathnode END).views = [] SET pathnode.views = (CASE WHEN "V14_2" IN pathnode.views THEN [] ELSE ["V14_2"] END) + pathnode.views)
FOREACH(pathnode in relationships(p) | SET(CASE WHEN NOT EXISTS(pathnode.views) THEN pathnode END).views = [] SET pathnode.views = (CASE WHEN "V14_2" IN pathnode.views THEN [] ELSE ["V14_2"] END) + pathnode.views)
Executing query:  MATCH p=(n:User)-[:POSTED]-(po:Post)-[:HAS_TAG]-(t:Tag)-[:HAS_TAG]-(po2:Post)-[:POSTED]-(n) WHERE t.tagId = 'java' OR t.tagId = 'c#' RETURN p
Return set contains 312509
There are 172792 nodes
Took 33857ms to create views
*********************************
WITH VIEWS V5 GLOBAL MATCH (p1:Post)-[:PARENT_OF]->(p2:Post) WHERE p1 IN V5 RETURN p2
In enterRoot ctx is WITH VIEWSV5GLOBALMATCH(p1:Post)-[:PARENT_OF]->(p2:Post)WHEREp1INV5RETURNp2
VarLables of the input is {_ENTRY_SPECIAL_NO_REL_NAME_39=PARENT_OF}
Return Type is DEFAULT
FullQuery:: MATCH  (p1:Post)-[:PARENT_OF]->(p2:Post) WHERE p1 IN V5 RETURN p2
cmd:: WITH VIEWS V5 GLOBAL MATCH (p1:Post)-[:PARENT_OF]->(p2:Post) WHERE p1 IN V5 RETURN p2
Scope:GLOBAL
15326630
Before calling execute query
Before assigning rows
After assigning rows and before commiting the transaction
Execution done
After the call to execute query
Took 256148ms to use view
*********************************
WITH VIEWS V5 V6_2 GLOBAL MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post) WHERE p1 IN V5 AND n IN V6_2 RETURN p2
In enterRoot ctx is WITH VIEWSV5V6_2GLOBALMATCH(n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)WHEREp1INV5ANDnINV6_2RETURNp2
VarLables of the input is {_ENTRY_SPECIAL_NO_REL_NAME_41=PARENT_OF, _ENTRY_SPECIAL_NO_REL_NAME_40=POSTED}
Return Type is DEFAULT
FullQuery:: MATCH  (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post) WHERE p1 IN V5 AND n IN V6_2 RETURN p2
cmd:: WITH VIEWS V5 V6_2 GLOBAL MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post) WHERE p1 IN V5 AND n IN V6_2 RETURN p2
Scope:GLOBAL
15525309
Before calling execute query
Before assigning rows
After assigning rows and before commiting the transaction
Execution done
After the call to execute query
Took 318466ms to use view
*********************************
WITH VIEWS V7_1 GLOBAL MATCH (n:User)-[:POSTED]-(m:Post) WHERE n IN V7_1 RETURN m
In enterRoot ctx is WITH VIEWSV7_1GLOBALMATCH(n:User)-[:POSTED]-(m:Post)WHEREnINV7_1RETURNm
VarLables of the input is {_ENTRY_SPECIAL_NO_REL_NAME_42=POSTED}
Return Type is DEFAULT
FullQuery:: MATCH  (n:User)-[:POSTED]-(m:Post) WHERE n IN V7_1 RETURN m
cmd:: WITH VIEWS V7_1 GLOBAL MATCH (n:User)-[:POSTED]-(m:Post) WHERE n IN V7_1 RETURN m
Scope:GLOBAL
587764
Before calling execute query
Before assigning rows
After assigning rows and before commiting the transaction
Execution done
After the call to execute query
Took 19106ms to use view
*********************************
WITH VIEWS V5 V7_1 GLOBAL MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post) WHERE p1 IN V5 AND n IN V7_1 RETURN p2
In enterRoot ctx is WITH VIEWSV5V7_1GLOBALMATCH(n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)WHEREp1INV5ANDnINV7_1RETURNp2
VarLables of the input is {_ENTRY_SPECIAL_NO_REL_NAME_43=POSTED, _ENTRY_SPECIAL_NO_REL_NAME_44=PARENT_OF}
Return Type is DEFAULT
FullQuery:: MATCH  (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post) WHERE p1 IN V5 AND n IN V7_1 RETURN p2
cmd:: WITH VIEWS V5 V7_1 GLOBAL MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post) WHERE p1 IN V5 AND n IN V7_1 RETURN p2
Scope:GLOBAL
15914367
Before calling execute query
Before assigning rows
After assigning rows and before commiting the transaction
Execution done
After the call to execute query
Took 116065ms to use view
*********************************
WITH VIEWS V7_2 GLOBAL MATCH (n:User)-[:POSTED]-(m:Post) WHERE n IN V7_2 RETURN m
In enterRoot ctx is WITH VIEWSV7_2GLOBALMATCH(n:User)-[:POSTED]-(m:Post)WHEREnINV7_2RETURNm
VarLables of the input is {_ENTRY_SPECIAL_NO_REL_NAME_45=POSTED}
Return Type is DEFAULT
FullQuery:: MATCH  (n:User)-[:POSTED]-(m:Post) WHERE n IN V7_2 RETURN m
cmd:: WITH VIEWS V7_2 GLOBAL MATCH (n:User)-[:POSTED]-(m:Post) WHERE n IN V7_2 RETURN m
Scope:GLOBAL
439153
Before calling execute query
Before assigning rows
After assigning rows and before commiting the transaction
Execution done
After the call to execute query
Took 17248ms to use view
*********************************
WITH VIEWS V7_2 GLOBAL MATCH (n:User)-[:POSTED]-(m:Post) WHERE n IN V7_2 RETURN m
In enterRoot ctx is WITH VIEWSV7_2GLOBALMATCH(n:User)-[:POSTED]-(m:Post)WHEREnINV7_2RETURNm
VarLables of the input is {_ENTRY_SPECIAL_NO_REL_NAME_46=POSTED}
Return Type is DEFAULT
FullQuery:: MATCH  (n:User)-[:POSTED]-(m:Post) WHERE n IN V7_2 RETURN m
cmd:: WITH VIEWS V7_2 GLOBAL MATCH (n:User)-[:POSTED]-(m:Post) WHERE n IN V7_2 RETURN m
Scope:GLOBAL
439153
Before calling execute query
Before assigning rows
After assigning rows and before commiting the transaction
Execution done
After the call to execute query
Took 6091ms to use view
*********************************
WITH VIEWS V5 GLOBAL MATCH (p1:Post)-[:PARENT_OF]->(p2:Post) WHERE p1 IN V5 RETURN p2
In enterRoot ctx is WITH VIEWSV5GLOBALMATCH(p1:Post)-[:PARENT_OF]->(p2:Post)WHEREp1INV5RETURNp2
VarLables of the input is {_ENTRY_SPECIAL_NO_REL_NAME_47=PARENT_OF}
Return Type is DEFAULT
FullQuery:: MATCH  (p1:Post)-[:PARENT_OF]->(p2:Post) WHERE p1 IN V5 RETURN p2
cmd:: WITH VIEWS V5 GLOBAL MATCH (p1:Post)-[:PARENT_OF]->(p2:Post) WHERE p1 IN V5 RETURN p2
Scope:GLOBAL
15326630
Before calling execute query
Before assigning rows
After assigning rows and before commiting the transaction
Execution done
After the call to execute query
Took 7887ms to use view
*********************************
WITH VIEWS V7_1 GLOBAL MATCH (n:User)-[:POSTED]-(m:Post) WHERE n IN V7_1 RETURN m
In enterRoot ctx is WITH VIEWSV7_1GLOBALMATCH(n:User)-[:POSTED]-(m:Post)WHEREnINV7_1RETURNm
VarLables of the input is {_ENTRY_SPECIAL_NO_REL_NAME_48=POSTED}
Return Type is DEFAULT
FullQuery:: MATCH  (n:User)-[:POSTED]-(m:Post) WHERE n IN V7_1 RETURN m
cmd:: WITH VIEWS V7_1 GLOBAL MATCH (n:User)-[:POSTED]-(m:Post) WHERE n IN V7_1 RETURN m
Scope:GLOBAL
587764
Before calling execute query
Before assigning rows
After assigning rows and before commiting the transaction
Execution done
After the call to execute query
Took 6114ms to use view
*********************************
WITH VIEWS V5 V6_2 GLOBAL MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post) WHERE p1 IN V5 AND n IN V6_2 RETURN p2
In enterRoot ctx is WITH VIEWSV5V6_2GLOBALMATCH(n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)WHEREp1INV5ANDnINV6_2RETURNp2
VarLables of the input is {_ENTRY_SPECIAL_NO_REL_NAME_50=PARENT_OF, _ENTRY_SPECIAL_NO_REL_NAME_49=POSTED}
Return Type is DEFAULT
FullQuery:: MATCH  (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post) WHERE p1 IN V5 AND n IN V6_2 RETURN p2
cmd:: WITH VIEWS V5 V6_2 GLOBAL MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post) WHERE p1 IN V5 AND n IN V6_2 RETURN p2
Scope:GLOBAL
15525309
Before calling execute query
Before assigning rows
After assigning rows and before commiting the transaction
Execution done
After the call to execute query
Took 4298ms to use view
*********************************
WITH VIEWS V5 V7_1 GLOBAL MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post) WHERE p1 IN V5 AND n IN V7_1 RETURN p2
In enterRoot ctx is WITH VIEWSV5V7_1GLOBALMATCH(n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)WHEREp1INV5ANDnINV7_1RETURNp2
VarLables of the input is {_ENTRY_SPECIAL_NO_REL_NAME_52=PARENT_OF, _ENTRY_SPECIAL_NO_REL_NAME_51=POSTED}
Return Type is DEFAULT
FullQuery:: MATCH  (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post) WHERE p1 IN V5 AND n IN V7_1 RETURN p2
cmd:: WITH VIEWS V5 V7_1 GLOBAL MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post) WHERE p1 IN V5 AND n IN V7_1 RETURN p2
Scope:GLOBAL
15914367
Before calling execute query
Before assigning rows
After assigning rows and before commiting the transaction
Execution done
After the call to execute query
Took 8994ms to use view
*********************************
WITH VIEWS V5 V6_2 GLOBAL MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post) WHERE p1 IN V5 AND n IN V6_2 RETURN p2
In enterRoot ctx is WITH VIEWSV5V6_2GLOBALMATCH(n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)WHEREp1INV5ANDnINV6_2RETURNp2
VarLables of the input is {_ENTRY_SPECIAL_NO_REL_NAME_54=PARENT_OF, _ENTRY_SPECIAL_NO_REL_NAME_53=POSTED}
Return Type is DEFAULT
FullQuery:: MATCH  (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post) WHERE p1 IN V5 AND n IN V6_2 RETURN p2
cmd:: WITH VIEWS V5 V6_2 GLOBAL MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post) WHERE p1 IN V5 AND n IN V6_2 RETURN p2
Scope:GLOBAL
15525309
Before calling execute query
Before assigning rows
After assigning rows and before commiting the transaction
Execution done
After the call to execute query
Took 4366ms to use view
*********************************
WITH VIEWS V5 GLOBAL MATCH (p1:Post)-[:PARENT_OF]->(p2:Post) WHERE p1 IN V5 RETURN p2
In enterRoot ctx is WITH VIEWSV5GLOBALMATCH(p1:Post)-[:PARENT_OF]->(p2:Post)WHEREp1INV5RETURNp2
VarLables of the input is {_ENTRY_SPECIAL_NO_REL_NAME_55=PARENT_OF}
Return Type is DEFAULT
FullQuery:: MATCH  (p1:Post)-[:PARENT_OF]->(p2:Post) WHERE p1 IN V5 RETURN p2
cmd:: WITH VIEWS V5 GLOBAL MATCH (p1:Post)-[:PARENT_OF]->(p2:Post) WHERE p1 IN V5 RETURN p2
Scope:GLOBAL
15326630
Before calling execute query
Before assigning rows
After assigning rows and before commiting the transaction
Execution done
After the call to execute query
Took 8004ms to use view
*********************************
WITH VIEWS V7_1 GLOBAL MATCH (n:User)-[:POSTED]-(m:Post) WHERE n IN V7_1 RETURN m
In enterRoot ctx is WITH VIEWSV7_1GLOBALMATCH(n:User)-[:POSTED]-(m:Post)WHEREnINV7_1RETURNm
VarLables of the input is {_ENTRY_SPECIAL_NO_REL_NAME_56=POSTED}
Return Type is DEFAULT
FullQuery:: MATCH  (n:User)-[:POSTED]-(m:Post) WHERE n IN V7_1 RETURN m
cmd:: WITH VIEWS V7_1 GLOBAL MATCH (n:User)-[:POSTED]-(m:Post) WHERE n IN V7_1 RETURN m
Scope:GLOBAL
587764
Before calling execute query
Before assigning rows
After assigning rows and before commiting the transaction
Execution done
After the call to execute query
Took 6107ms to use view
*********************************
WITH VIEWS V5 V7_1 GLOBAL MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post) WHERE p1 IN V5 AND n IN V7_1 RETURN p2
In enterRoot ctx is WITH VIEWSV5V7_1GLOBALMATCH(n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)WHEREp1INV5ANDnINV7_1RETURNp2
VarLables of the input is {_ENTRY_SPECIAL_NO_REL_NAME_58=PARENT_OF, _ENTRY_SPECIAL_NO_REL_NAME_57=POSTED}
Return Type is DEFAULT
FullQuery:: MATCH  (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post) WHERE p1 IN V5 AND n IN V7_1 RETURN p2
cmd:: WITH VIEWS V5 V7_1 GLOBAL MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post) WHERE p1 IN V5 AND n IN V7_1 RETURN p2
Scope:GLOBAL
15914367
Before calling execute query
Before assigning rows
After assigning rows and before commiting the transaction
Execution done
After the call to execute query
Took 8869ms to use view
*********************************
WITH VIEWS V7_2 GLOBAL MATCH (n:User)-[:POSTED]-(m:Post) WHERE n IN V7_2 RETURN m
In enterRoot ctx is WITH VIEWSV7_2GLOBALMATCH(n:User)-[:POSTED]-(m:Post)WHEREnINV7_2RETURNm
VarLables of the input is {_ENTRY_SPECIAL_NO_REL_NAME_59=POSTED}
Return Type is DEFAULT
FullQuery:: MATCH  (n:User)-[:POSTED]-(m:Post) WHERE n IN V7_2 RETURN m
cmd:: WITH VIEWS V7_2 GLOBAL MATCH (n:User)-[:POSTED]-(m:Post) WHERE n IN V7_2 RETURN m
Scope:GLOBAL
439153
Before calling execute query
Before assigning rows
After assigning rows and before commiting the transaction
Execution done
After the call to execute query
Took 6167ms to use view
*********************************
WITH VIEWS V5 V7_1 GLOBAL MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post) WHERE p1 IN V5 AND n IN V7_1 RETURN p2
In enterRoot ctx is WITH VIEWSV5V7_1GLOBALMATCH(n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)WHEREp1INV5ANDnINV7_1RETURNp2
VarLables of the input is {_ENTRY_SPECIAL_NO_REL_NAME_61=PARENT_OF, _ENTRY_SPECIAL_NO_REL_NAME_60=POSTED}
Return Type is DEFAULT
FullQuery:: MATCH  (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post) WHERE p1 IN V5 AND n IN V7_1 RETURN p2
cmd:: WITH VIEWS V5 V7_1 GLOBAL MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post) WHERE p1 IN V5 AND n IN V7_1 RETURN p2
Scope:GLOBAL
15914367
Before calling execute query
Before assigning rows
After assigning rows and before commiting the transaction
Execution done
After the call to execute query
Took 8906ms to use view
*********************************
WITH VIEWS V5 V6_2 GLOBAL MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post) WHERE p1 IN V5 AND n IN V6_2 RETURN p2
In enterRoot ctx is WITH VIEWSV5V6_2GLOBALMATCH(n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)WHEREp1INV5ANDnINV6_2RETURNp2
VarLables of the input is {_ENTRY_SPECIAL_NO_REL_NAME_63=PARENT_OF, _ENTRY_SPECIAL_NO_REL_NAME_62=POSTED}
Return Type is DEFAULT
FullQuery:: MATCH  (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post) WHERE p1 IN V5 AND n IN V6_2 RETURN p2
cmd:: WITH VIEWS V5 V6_2 GLOBAL MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post) WHERE p1 IN V5 AND n IN V6_2 RETURN p2
Scope:GLOBAL
15525309
Before calling execute query
Before assigning rows
After assigning rows and before commiting the transaction
Execution done
After the call to execute query
Took 4271ms to use view
*********************************
WITH VIEWS V7_2 GLOBAL MATCH (n:User)-[:POSTED]-(m:Post) WHERE n IN V7_2 RETURN m
In enterRoot ctx is WITH VIEWSV7_2GLOBALMATCH(n:User)-[:POSTED]-(m:Post)WHEREnINV7_2RETURNm
VarLables of the input is {_ENTRY_SPECIAL_NO_REL_NAME_64=POSTED}
Return Type is DEFAULT
FullQuery:: MATCH  (n:User)-[:POSTED]-(m:Post) WHERE n IN V7_2 RETURN m
cmd:: WITH VIEWS V7_2 GLOBAL MATCH (n:User)-[:POSTED]-(m:Post) WHERE n IN V7_2 RETURN m
Scope:GLOBAL
439153
Before calling execute query
Before assigning rows
After assigning rows and before commiting the transaction
Execution done
After the call to execute query
Took 6152ms to use view
*********************************
WITH VIEWS V7_1 GLOBAL MATCH (n:User)-[:POSTED]-(m:Post) WHERE n IN V7_1 RETURN m
In enterRoot ctx is WITH VIEWSV7_1GLOBALMATCH(n:User)-[:POSTED]-(m:Post)WHEREnINV7_1RETURNm
VarLables of the input is {_ENTRY_SPECIAL_NO_REL_NAME_65=POSTED}
Return Type is DEFAULT
FullQuery:: MATCH  (n:User)-[:POSTED]-(m:Post) WHERE n IN V7_1 RETURN m
cmd:: WITH VIEWS V7_1 GLOBAL MATCH (n:User)-[:POSTED]-(m:Post) WHERE n IN V7_1 RETURN m
Scope:GLOBAL
587764
Before calling execute query
Before assigning rows
After assigning rows and before commiting the transaction
Execution done
After the call to execute query
Took 6201ms to use view
*********************************
WITH VIEWS V5 GLOBAL MATCH (p1:Post)-[:PARENT_OF]->(p2:Post) WHERE p1 IN V5 RETURN p2
In enterRoot ctx is WITH VIEWSV5GLOBALMATCH(p1:Post)-[:PARENT_OF]->(p2:Post)WHEREp1INV5RETURNp2
VarLables of the input is {_ENTRY_SPECIAL_NO_REL_NAME_66=PARENT_OF}
Return Type is DEFAULT
FullQuery:: MATCH  (p1:Post)-[:PARENT_OF]->(p2:Post) WHERE p1 IN V5 RETURN p2
cmd:: WITH VIEWS V5 GLOBAL MATCH (p1:Post)-[:PARENT_OF]->(p2:Post) WHERE p1 IN V5 RETURN p2
Scope:GLOBAL
15326630
Before calling execute query
Before assigning rows
After assigning rows and before commiting the transaction
Execution done
After the call to execute query
Took 7994ms to use view
*********************************
WITH VIEWS V7_2 GLOBAL MATCH (n:User)-[:POSTED]-(m:Post) WHERE n IN V7_2 RETURN m
In enterRoot ctx is WITH VIEWSV7_2GLOBALMATCH(n:User)-[:POSTED]-(m:Post)WHEREnINV7_2RETURNm
VarLables of the input is {_ENTRY_SPECIAL_NO_REL_NAME_67=POSTED}
Return Type is DEFAULT
FullQuery:: MATCH  (n:User)-[:POSTED]-(m:Post) WHERE n IN V7_2 RETURN m
cmd:: WITH VIEWS V7_2 GLOBAL MATCH (n:User)-[:POSTED]-(m:Post) WHERE n IN V7_2 RETURN m
Scope:GLOBAL
439153
Before calling execute query
Before assigning rows
After assigning rows and before commiting the transaction
Execution done
After the call to execute query
Took 6173ms to use view
*********************************
WITH VIEWS V5 V7_1 GLOBAL MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post) WHERE p1 IN V5 AND n IN V7_1 RETURN p2
In enterRoot ctx is WITH VIEWSV5V7_1GLOBALMATCH(n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)WHEREp1INV5ANDnINV7_1RETURNp2
VarLables of the input is {_ENTRY_SPECIAL_NO_REL_NAME_69=PARENT_OF, _ENTRY_SPECIAL_NO_REL_NAME_68=POSTED}
Return Type is DEFAULT
FullQuery:: MATCH  (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post) WHERE p1 IN V5 AND n IN V7_1 RETURN p2
cmd:: WITH VIEWS V5 V7_1 GLOBAL MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post) WHERE p1 IN V5 AND n IN V7_1 RETURN p2
Scope:GLOBAL
15914367
Before calling execute query
Before assigning rows
After assigning rows and before commiting the transaction
Execution done
After the call to execute query
Took 8863ms to use view
*********************************
WITH VIEWS V5 V6_2 GLOBAL MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post) WHERE p1 IN V5 AND n IN V6_2 RETURN p2
In enterRoot ctx is WITH VIEWSV5V6_2GLOBALMATCH(n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post)WHEREp1INV5ANDnINV6_2RETURNp2
VarLables of the input is {_ENTRY_SPECIAL_NO_REL_NAME_70=POSTED, _ENTRY_SPECIAL_NO_REL_NAME_71=PARENT_OF}
Return Type is DEFAULT
FullQuery:: MATCH  (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post) WHERE p1 IN V5 AND n IN V6_2 RETURN p2
cmd:: WITH VIEWS V5 V6_2 GLOBAL MATCH (n:User)-[:POSTED]-(p1:Post)-[:PARENT_OF]-(p2:Post) WHERE p1 IN V5 AND n IN V6_2 RETURN p2
Scope:GLOBAL
15525309
Before calling execute query
Before assigning rows
After assigning rows and before commiting the transaction
Execution done
After the call to execute query
Took 4334ms to use view
*********************************
WITH VIEWS V7_1 GLOBAL MATCH (n:User)-[:POSTED]-(m:Post) WHERE n IN V7_1 RETURN m
In enterRoot ctx is WITH VIEWSV7_1GLOBALMATCH(n:User)-[:POSTED]-(m:Post)WHEREnINV7_1RETURNm
VarLables of the input is {_ENTRY_SPECIAL_NO_REL_NAME_72=POSTED}
Return Type is DEFAULT
FullQuery:: MATCH  (n:User)-[:POSTED]-(m:Post) WHERE n IN V7_1 RETURN m
cmd:: WITH VIEWS V7_1 GLOBAL MATCH (n:User)-[:POSTED]-(m:Post) WHERE n IN V7_1 RETURN m
Scope:GLOBAL
587764
Before calling execute query
Before assigning rows
After assigning rows and before commiting the transaction
Execution done
After the call to execute query
Took 6079ms to use view
*********************************
WITH VIEWS V5 GLOBAL MATCH (p1:Post)-[:PARENT_OF]->(p2:Post) WHERE p1 IN V5 RETURN p2
In enterRoot ctx is WITH VIEWSV5GLOBALMATCH(p1:Post)-[:PARENT_OF]->(p2:Post)WHEREp1INV5RETURNp2
VarLables of the input is {_ENTRY_SPECIAL_NO_REL_NAME_73=PARENT_OF}
Return Type is DEFAULT
FullQuery:: MATCH  (p1:Post)-[:PARENT_OF]->(p2:Post) WHERE p1 IN V5 RETURN p2
cmd:: WITH VIEWS V5 GLOBAL MATCH (p1:Post)-[:PARENT_OF]->(p2:Post) WHERE p1 IN V5 RETURN p2
Scope:GLOBAL
15326630
Before calling execute query
Before assigning rows
After assigning rows and before commiting the transaction
Execution done
After the call to execute query
Took 8262ms to use view
*********************************

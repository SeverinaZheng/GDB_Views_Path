//Interactive IC2-- EDGE
CREATE VIEW AS V_IC2 MATCH p1=(p:Person)-[r1:KNOWS]-(friend:Person),p2 = (friend)<-[r2:HAS_CREATOR]-(message:Message) WHERE ID(p) = 22249 AND message.creationDate <= 1322000000000 RETURN p2 ORDER BY message.creationDate DESC, toInteger(ID(message)) ASC LIMIT 20
    
WITH VIEWS V_IC2 LOCAL MATCH p=(p1:Person)-[]-(message:Message) WHERE p IN V_IC2 RETURN p1,message
   
//IC 4   ---NODE
CREATE VIEW AS V4 MATCH p1=(person:Person)-[:KNOWS]-(friend:Person)<-[:HAS_CREATOR]-(post:Post),p2=(post)-[:HAS_TAG]->(tag) WHERE ID(person) = 22249 RETURN DISTINCT p2

WITH VIEWS V4 GLOBAL MATCH p=(post:Post)-[:HAS_TAG]->(tag:Tag) WHERE p IN V4 WITH tag, CASE WHEN 1345000000000 <= post.creationDate < 1348000000000 THEN 1 ELSE 0 END AS valid, CASE WHEN post.creationDate <1345000000000 THEN 1 ELSE 0 END AS inValid WITH tag, SUM(valid) AS postCount, SUM(inValid) AS inValidPostCount WHERE postCount>0 AND inValidPostCount=0 RETURN tag ORDER BY postCount DESC LIMIT 10
    
//IC 5 ---PATH
CREATE VIEW AS V5 MATCH (person:Person)-[:KNOWS*1..2]-(friend) WHERE ID(person) = 11220 AND NOT person=friend RETURN friend

WITH VIEWS V5 GLOBAL MATCH (friend:Person)<-[membership:HAS_MEMBER]-(forum) WHERE friend IN V5 AND membership.joinDate > 1322000000000 WITH forum, COLLECT(friend) AS friends OPTIONAL MATCH (friend)<-[:HAS_CREATOR]-(post)<-[:CONTAINER_OF]-(forum) WHERE friend IN friends WITH forum, COUNT(post) AS postCount RETURN forum.title AS forumName, postCount ORDER BY postCount DESC, ID(forum) ASC LIMIT 20

//IC 6 ---NODE
CREATE VIEW AS V6 MATCH (knownTag:Tag) WHERE knownTag.name="Muammar_Gaddafi" WITH knownTag MATCH (person:Person)-[:KNOWS*1..2]-(friend) WHERE ID(person)= 11231 AND NOT person=friend RETURN knownTag,friend

WITH VIEWS V6 GLOBAL MATCH (f:Person)<-[:HAS_CREATOR]-(post:Post), (post)-[:HAS_TAG]->(t:Tag), (post)-[:HAS_TAG]->(tag:Tag) WHERE f IN V6.friend AND t IN V6.knownTag AND NOT t = tag WITH tag.name as tagName, COUNT(post) as postCount RETURN tagName, postCount ORDER BY postCount DESC, tagName ASC LIMIT 10

//IC 8   -- PATH
:param personId: 22133
CREATE VIEW AS V8 MATCH p=(start:Person)<-[:HAS_CREATOR]-(m:Message)<-[:REPLY_OF]-(comment:Comment), p2 = (comment)-[:HAS_CREATOR]->(person:Person) WHERE ID(start) = 22133 RETURN p2

WITH VIEWS V8 LOCAL MATCH p=(comment:Comment)<-[]-(person:Person) WHERE p IN V8 RETURN ID(person) AS personId, person.firstName AS personFirstName, person.lastName AS personLastName, comment.creationDate AS commentCreationDate, ID(comment) AS commentId, comment.content AS commentContent ORDER BY commentCreationDate DESC, commentId ASC LIMIT 20

//IC 12 ----NODE
CREATE VIEW AS V12 MATCH (tag:Tag)-[:HAS_TYPE|IS_SUBCLASS_OF*0..]->(baseTagClass:TagClass) WHERE tag.name = "OfficeHolder" OR baseTagClass.name = "OfficeHolder" WITH COLLECT(ID(tag)) as tags MATCH p1=(p:Person)-[:KNOWS]-(friend:Person)<-[:HAS_CREATOR]-(comment:Comment)-[:REPLY_OF]->(post:Post)-[:HAS_TAG]->(tag:Tag) WHERE ID(p) = 22084 AND ID(tag) IN tags RETURN p1

WITH VIEWS V12 LOCAL MATCH p=(person)-[:KNOWS]-(friend)<-[:HAS_CREATOR]-(comment)-[:REPLY_OF]->(post)-[:HAS_TAG]->(tag) WHERE p IN V12 RETURN ID(friend) AS personId, friend.firstName AS personFirstName, friend.lastName AS personLastName, COLLECT(tag.name) AS tagNames, COUNT(comment) AS replyCount ORDER BY replyCount DESC, toInteger(personId) ASC LIMIT 20

    
//short IS2 
CREATE VIEW AS V2_2 MATCH (p:Person)<-[:HAS_CREATOR]-(message) WHERE ID(p) = 22133 RETURN message ORDER BY message.creationDate DESC, ID(message) ASC LIMIT 10

WITH VIEWS V2_2 GLOBAL MATCH (message)-[:REPLY_OF*0..]->(post:Post)-[:HAS_CREATOR]->(person) WHERE message IN V2_2 RETURN ID(message) AS messageId, coalesce(message.imageFile,message.content) AS messageContent, message.creationDate AS messageCreationDate, ID(post) AS postId, ID(person) AS personId, person.firstName AS personFirstName, person.lastName AS personLastName ORDER BY messageCreationDate DESC, messageId ASC

//IS3     ---PATH
CREATE VIEW AS V3 MATCH p=(n:Person)-[r:KNOWS]-(friend) WHERE ID(n) = 22084 RETURN p ORDER BY r.creationDate DESC, toInteger(ID(friend)) ASC
    
WITH VIEWS V3 LOCAL MATCH p=(n)-[r:KNOWS]-(friend) WHERE p IN V3 AND ID(n) = 22084 RETURN r.creationDate, ID(friend) AS personId, friend.firstName AS firstName, friend.lastName AS lastName


//IS4     
CREATE VIEW AS V4 MATCH (m:Message) WHERE ID(m) = 0 RETURN m
WITH VIEWS V4 LOCAL MATCH (n) WHERE n IN V4 RETURN n.creationDate as messageCreationDate, coalesce(n.content, n.imageFile) as messageContent


//IS5 
CREATE VIEW AS V5 MATCH (m:Message)-[r1:HAS_CREATOR]->(p:Person) WHERE ID(m) = 1067 RETURN p
WITH VIEWS V5 LOCAL MATCH (n) WHERE n IN V5 RETURN n

//IS6---PATH     
CREATE VIEW AS V6 MATCH p1=(m:Message)-[:REPLY_OF*0..]->(p:Post)<-[:CONTAINER_OF]-(f:Forum),p2 = (f)-[:HAS_MODERATOR]->(mod:Person) WHERE ID(m) = 23424 RETURN p1, p2
WITH VIEWS V6 LOCAL MATCH p=(f:Forum)-[:HAS_MODERATOR]->(mod:Person) WHERE p IN V6.p2 RETURN ID(f) AS forumId,f.title AS forumTitle,ID(mod) AS moderatorId,mod.firstName AS moderatorFirstName,mod.lastName AS moderatorLastName

//IS7     
CREATE VIEW AS V7 MATCH (m:Message)<-[r1:REPLY_OF]-(c:Comment)-[r2:HAS_CREATOR]->(p:Person) WHERE ID(m) = 266346 OPTIONAL MATCH p1=(m)-[:HAS_CREATOR]->(a:Person)-[r:KNOWS]-(p)<-[r2]-(c)-[r1]->(m) RETURN p1
WITH VIEWS V7 LOCAL MATCH p=(m)-[:HAS_CREATOR]->(a:Person)-[r:KNOWS]-(reply)<-[r2]-(c)-[r3]->(m) WHERE p IN V7.p1 RETURN ID(reply) AS replyAuthorId,reply.firstName AS replyAuthorFirstName,reply.lastName AS replyAuthorLastName,CASE r WHEN null THEN false ELSE true END AS replyAuthorKnowsOriginalMessageAuthor ORDER BY replyAuthorId


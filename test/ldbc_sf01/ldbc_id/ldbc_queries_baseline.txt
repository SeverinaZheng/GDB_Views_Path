MATCH (p:Person)-[:KNOWS]-(friend:Person)<-[:HAS_CREATOR]-(message:Message) WHERE ID(p) = 15151 AND message.creationDate <= 1322000000000 RETURN friend,message ORDER BY message.creationDate DESC,toInteger(id(message)) ASC LIMIT 20
MATCH (person:Person)-[:KNOWS*1..2]-(friend) WHERE ID(person) = 15151 AND NOT person=friend WITH DISTINCT friend MATCH (friend)<-[membership:HAS_MEMBER]-(forum) WHERE membership.joinDate > 1322000000000 WITH forum, collect(friend) AS friends OPTIONAL MATCH (friend)<-[:HAS_CREATOR]-(post)<-[:CONTAINER_OF]-(forum) WHERE friend IN friends WITH forum,count(post) AS postCount RETURN forum.title AS forumName, postCount ORDER BY postCount DESC, forum.id ASC LIMIT 20
MATCH (knownTag:Tag) WHERE knownTag.name= "Muammar_Gaddafi" WITH id(knownTag) as knownTagId  MATCH (person:Person)-[:KNOWS*1..2]-(friend) WHERE id(person)= 15151 AND NOT person=friend WITH knownTagId, collect(distinct friend) as friends UNWIND friends as f MATCH (f)<-[:HAS_CREATOR]-(post:Post),(post)-[:HAS_TAG]->(t:Tag), (post)-[:HAS_TAG]->(tag:Tag)WHERE id(t)= knownTagId AND NOT t = tag WITH tag.name as tagName, count(post) as postCount RETURN tagName, postCount ORDER BY postCount DESC,tagName ASC LIMIT 10
MATCH (tag:Tag {name:"Muammar_Gaddafi"})<-[:HAS_TAG]-(message:Message)-[:HAS_CREATOR]->(person:Person) OPTIONAL MATCH (message)<-[likes:LIKES]-(:Person) WITH person, message, count(likes) AS likeCount OPTIONAL MATCH (message)<-[:REPLY_OF]-(reply:Comment) WITH person, message, likeCount, count(reply) AS replyCount WITH person, count(message) AS messageCount, sum(likeCount) AS likeCount, sum(replyCount) AS replyCount RETURN person.id,  replyCount, likeCount, messageCount, 1*messageCount + 2*replyCount + 10*likeCount AS score ORDER BY score DESC,  person.id ASC LIMIT 100
MATCH (tag:Tag ), (person1:Person)<-[:HAS_CREATOR]-(message1:Message)-[:REPLY_OF*0..]->(post1:Post)<-[:CONTAINER_OF]-(forum1:Forum), (message1)-[:HAS_TAG]->(tag), (forum1)<-[:HAS_MEMBER]->(person2:Person)<-[:HAS_CREATOR]-(comment:Comment)-[:HAS_TAG]->(tag), (forum1)<-[:HAS_MEMBER]->(person3:Person)<-[:HAS_CREATOR]-(message2:Message), (comment)-[:REPLY_OF]->(message2)-[:REPLY_OF*0..]->(post2:Post)<-[:CONTAINER_OF]-(forum2:Forum) WHERE tag.name= "Muammar_Gaddafi" MATCH (comment)-[:HAS_TAG]->(tag) MATCH (message2)-[:HAS_TAG]->(tag) WHERE NOT ID(forum1) = ID(forum2) AND message2.creationDate > message1.creationDate + 20000000000 AND NOT (forum2)-[:HAS_MEMBER]->(person1) WITH person1,COUNT(DISTINCT message2) AS messageCount RETURN ID(person1),messageCount ORDER BY messageCount DESC, ID(person1) ASC LIMIT 10



IS
MATCH (p:Person)<-[:HAS_CREATOR]-(message) WHERE ID(p) = 4102 WITH message,  ID(message) AS messageId, message.creationDate AS messageCreationDate ORDER BY messageCreationDate DESC, messageId ASC LIMIT 10 MATCH (message)-[:REPLY_OF*0..]->(post:Post)-[:HAS_CREATOR]->(person) RETURN  messageId, coalesce(message.imageFile,message.content) AS messageContent, messageCreationDate,  ID(post) AS postId, ID(person) AS personId,  person.firstName AS personFirstName,   person.lastName AS personLastName ORDER BY messageCreationDate DESC, messageId ASC
MATCH p=(n:Person)-[r:KNOWS]-(friend) WHERE ID(n) = 6852 RETURN ID(friend) AS personId, friend.firstName AS firstName, friend.lastName AS lastName, r.creationDate AS friendshipCreationDate ORDER BY friendshipCreationDate DESC
MATCH (m:Message) WHERE ID(m) = 0 RETURN m.creationDate as messageCreationDate, coalesce(m.content, m.imageFile) as messageContent
MATCH p1=(m:Message)-[:REPLY_OF*0..]->(p:Post)<-[:CONTAINER_OF]-(f:Forum)-[:HAS_MODERATOR]->(mod:Person) WHERE ID(m) = 5263 RETURN  ID(f) AS forumId,  f.title AS forumTitle,  ID(mod) AS moderatorId,     mod.firstName AS moderatorFirstName,   mod.lastName AS moderatorLastName
MATCH p=(m:Message)<-[:REPLY_OF]-(c:Comment)-[:HAS_CREATOR]->(person:Person) WHERE ID(m) = 139398 OPTIONAL MATCH (m)-[:HAS_CREATOR]->(a:Person)-[r:KNOWS]-(person)  RETURN c.id AS commentId,    c.content AS commentContent,   c.creationDate AS commentCreationDate, ID(person) AS replyAuthorId,  person.firstName AS replyAuthorFirstName,  person.lastName AS replyAuthorLastName  ORDER BY commentCreationDate DESC, replyAuthorId



MATCH (start:Person)<-[:HAS_CREATOR]-(:Message)<-[:REPLY_OF]-(comment:Comment)-[:HAS_CREATOR]->(person:Person) WHERE ID(start) = 22133 RETURN ID(person) AS personId,person.firstName AS personFirstName, person.lastName AS personLastName,comment.creationDate AS commentCreationDate, ID(comment) AS commentId, comment.content AS commentContent ORDER BY commentCreationDate DESC, commentId ASC LIMIT 20
MATCH (tag:Tag)-[:HAS_TYPE|IS_SUBCLASS_OF*0..]->(baseTagClass:TagClass) WHERE tag.name = "OfficeHolder" OR baseTagClass.name = "OfficeHolder" WITH collect(ID(tag)) as tags MATCH (p:Person)-[:KNOWS]-(friend:Person)<-[:HAS_CREATOR]-(comment:Comment)-[:REPLY_OF]->(:Post)-[:HAS_TAG]->(tag:Tag) WHERE ID(p) = 22084 AND ID(tag) in tags RETURN ID(friend) AS personId,friend.firstName AS personFirstName,friend.lastName AS personLastName,   collect(DISTINCT tag.name) AS tagNames, count(DISTINCT comment) AS replyCount ORDER BY replyCount DESC,toInteger(personId) ASC LIMIT 20
MATCH (p:Person)<-[:HAS_CREATOR]-(message) WHERE ID(p) = 22133 WITH message, ID(message) AS messageId, message.creationDate AS messageCreationDate ORDER BY messageCreationDate DESC, messageId ASC LIMIT 10 MATCH (message)-[:REPLY_OF*0..]->(post:Post)-[:HAS_CREATOR]->(person) RETURN messageId, coalesce(message.imageFile,message.content) AS messageContent, messageCreationDate, ID(post) AS postId, ID(person) AS personId, person.firstName AS personFirstName, person.lastName AS personLastName ORDER BY messageCreationDate DESC, messageId ASC
MATCH (n:Person)-[r:KNOWS]-(friend) WHERE ID(n) = 22084 RETURN ID(friend) AS personId,    friend.firstName AS firstName, friend.lastName AS lastName,r.creationDate AS friendshipCreationDate ORDER BY friendshipCreationDate DESC,toInteger(personId) ASC
MATCH (m:Message) WHERE ID(m) = 0 RETURN m.creationDate as messageCreationDate,    coalesce(m.content, m.imageFile) as messageContent   
MATCH (m:Message)-[:HAS_CREATOR]->(p:Person) WHERE ID(m) = 1067 RETURN p
MATCH (m:Message)-[:REPLY_OF*0..]->(p:Post)<-[:CONTAINER_OF]-(f:Forum)-[:HAS_MODERATOR]->(mod:Person) WHERE ID(m) = 23424 RETURN ID(f) AS forumId,f.title AS forumTitle,ID(mod) AS moderatorId, mod.firstName AS moderatorFirstName, mod.lastName AS moderatorLastName
MATCH (m:Message)<-[:REPLY_OF]-(c:Comment)-[:HAS_CREATOR]->(p:Person) WHERE ID(m) = 266346 OPTIONAL MATCH (m)-[:HAS_CREATOR]->(a:Person)-[r:KNOWS]-(p) RETURN c.id AS commentId,      c.content AS commentContent, c.creationDate AS commentCreationDate, p.id AS replyAuthorId, p.firstName AS replyAuthorFirstName, p.lastName AS replyAuthorLastName, CASE r WHEN null THEN false ELSE true END AS replyAuthorKnowsOriginalMessageAuthor ORDER BY commentCreationDate DESC, replyAuthorId
